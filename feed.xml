<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
                <title>Code-Troopers blog</title>
                <description>Le blog de l'équipe Code-Troopers</description>                
                <link>http://code-troopers.com</link>
                <atom:link href="http://code-troopers.com/feed.xml" rel="self" type="application/rss+xml"/>
                
                        <item>
                                <title>GIT-SVN comment survivre dans un environnement hostile</title>
                                <description>&lt;p&gt;Git c’est cool, Git c’est Hype, Git c’est tout récent (&lt;a href=&quot;http://git-scm.com/book/fr/v1/D%C3%A9marrage-rapide-Une-rapide-histoire-de-Git&quot;&gt;enfin presque&lt;/a&gt;) et c’est pour ça qu’on aime bien.
Mais pour beaucoup Git c’est nouveau, donc c’est le changement, donc c’est compliqué, et c’est pour ça que plein de boîtes préfèrent garder leur serveur svn.&lt;/p&gt;

&lt;p&gt;Je vais tenter ici, de vous donner les principales commandes de &lt;code&gt;Git-SVN&lt;/code&gt;. Ainsi si vous vous trouvez dans une boîte qui ne veut pas changer son scm mais que vous, vous avez envie de changement,
vous pourrez donc utiliser la puissance de Git. 
Et ce sans aucun impact sur le gestionnaire de sources de la société dans laquelle vous êtes. C’est génial non ?&lt;/p&gt;

&lt;!--break--&gt;

&lt;h2 id=&quot;prrequis&quot;&gt;Prérequis&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Avoir Git-SVN d’installé ! Et ce qui est bien fait, c’est que Git-SVN fait partie intégrante de Git. C’est donc Git que vous allez installer : &lt;a href=&quot;http://www.git-scm.com&quot;&gt;www.git-scm.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Un accès au svn (l’url du projet qui vous intéresse fera largement l’affaire)&lt;/li&gt;
  &lt;li&gt;Un terminal&lt;/li&gt;
  &lt;li&gt;Un tout petit peu de courage&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;init-du-projet&quot;&gt;Init du Projet&lt;/h2&gt;
&lt;p&gt;Le cas le plus courant est celui où tout le monde travaille sur le trunk du projet, et je vais partir de ce cas pour ce guide. 
Si ce n’est pas le cas, il n’y a pas de gros changement, mais je vous invite à consulter plus en détail &lt;a href=&quot;https://git-scm.com/docs/git-svn&quot;&gt;la doc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Donc si on se met dans la situation où tout le monde travaille sur le trunk, pour récupérer les sources du projet dans un nouveau répertoire vous devrez faire un :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git svn clone http://maboite/svn/monBeauProjet/ -s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Par contre dès que le repo svn et un peu vieux (i.e. avec plein de commits) ça va mettre 3h ! En effet, Git va prendre les révisions une par une afin de créer son historique local.
Si vous n’avez pas besoin de tout l’historique des révisions ce que vous pouvez faire c’est :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git svn clone http://maboite/svn/monBeauProjet/ -s -r4000:HEAD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ainsi il ne crééra l’histo qu’à partir de la révision 4000 du svn. Je vous conseille donc de prendre le 4000 le plus proche de la dernière révision.&lt;/p&gt;

&lt;p&gt;À partir de là c’est bon, vous avez votre projet qui est géré par Git. La preuve vous pouvez tester via ces différentes commandes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git status
git branch -a
git log -n5
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;travailler-sur-le-projet-en-local&quot;&gt;Travailler sur le projet (en local)&lt;/h2&gt;
&lt;p&gt;Vous pouvez donc dès à présent commencer à travailler offline ou bien sans vous soucier des commits de vos collègues.
Et cela avec tous les avantages que Git apporte.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -m&quot;Ajout de la modification du mot de passe par l'admin&quot;
git stash save “Début de ma tâche prioritaire”
... // un peu de travail urgent
git stash pop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On peut même faire des branches Git (en local) sans que cela n’impacte le serveur.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b myLocalBranch
... // du travail avec plein de petits commits
git checkout master
git merge myLocalBranch
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;commiter-sur-le-svn&quot;&gt;Commiter sur le svn&lt;/h2&gt;
&lt;p&gt;Ensuite pour se synchroniser avec vos collègues (c’est mieux) les deux commandes indispensables sont&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git svn rebase
git svn dcommit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le &lt;code&gt;git svn rebase&lt;/code&gt; va faire l’équivalent d’un svn update quant au &lt;code&gt;git svn dcommit&lt;/code&gt; ça sera un svn commit.&lt;/p&gt;

&lt;h2 id=&quot;bonus--utiliser-des-branches&quot;&gt;Bonus : Utiliser des branches&lt;/h2&gt;
&lt;p&gt;Bon soyons honnêtes si vous utilisez un svn il y a quand même peu de chances que les branches soient vraiment utilisées (ou alors peut-être que vous aimez la douleur). Mais si ça arrive, voilà comment les utiliser.&lt;/p&gt;

&lt;p&gt;Mettre à jour toutes les branches du svn : &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git svn fetch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Changer de branche : &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b &amp;lt;brancheDistante&amp;gt; &amp;lt;nomDeBrancheLocale&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et maintenant vous pouvez naviguer entre vos branches normalement via Git  :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout master
git checkout nomDeBrancheLocale
git checkout -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;et par exemple pour recopier un commit d’une branche à une autre sans copier manuellement le fichier.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git cherry-pick
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Voilà vous avez maintenant les bases pour utiliser Git alors que de premier abord cela ne semblait pas possible.
Il ne vous reste plus qu’à forcer un peu plus pour remplacer l’ancien serveur svn par un nouveau sous Git et comme ça toute votre boîte pourra en profiter.
&lt;br /&gt;
&lt;br /&gt;
Pour connaître les principales commandes Git, je vous invite à consulter &lt;a href=&quot;http://git-scm.com/docs/gittutorial&quot;&gt;la page tutoriel de Git&lt;/a&gt; ou alors de chercher sur &lt;a href=&quot;http://lmgtfy.com/?q=git+commands&quot;&gt;internet&lt;/a&gt;.&lt;/p&gt;
</description>
                                <pubDate>Thu, 16 Jul 2015 00:00:00 +0200</pubDate>
                                <link>http://code-troopers.com/2015/07/16/GITSVN.html</link>
                                <guid isPermaLink="true">http://code-troopers.com/2015/07/16/GITSVN.html</guid>
                        </item>
                
                        <item>
                                <title>Installer votre dépot privé Docker</title>
                                <description>&lt;p&gt;Petit à petit chez Code-Troopers, nous migrons tous nos développements pour utiliser Docker. 
Cela fait quelque temps que nous l’utilisons pour des projets “public”, auquel cas le registry public Docker est largement suffisant (et immédiat à utiliser).&lt;/p&gt;

&lt;p&gt;En revanche, nous commençons à migrer nos applications de production également vers Docker, et nous ne pouvons pas utiliser le mode public du registry public.
Nous nous sommes donc mis à déployer un dépôt privé, authentifié par utilisateur / mot de passe. &lt;/p&gt;

&lt;p&gt;La procédure n’est pas très complexe, mais cette opération reste une bonne opportunité d’écrire un article à ce sujet (les articles en français n’étant pas légion).
&lt;!--break--&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-by-step&quot;&gt;Step by step&lt;/h2&gt;
&lt;p&gt;Il faut créer une entrée DNS pour votre service.&lt;/p&gt;

&lt;p&gt;Puis nous allons utiliser l’image Docker avec nginx pour l’authentification &lt;a href=&quot;https://github.com/MarvAmBass/docker-nginx-registry-proxy&quot;&gt;docker-nginx-registry-proxy&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;informations-didentification&quot;&gt;Informations d’identification&lt;/h2&gt;
&lt;p&gt;Pour les étapes suivantes, placez vous dans le répertoire de votre choix pour stocker les fichiers (dans ce cas nous sommes dans &lt;code&gt;/srv/registry-config&lt;/code&gt;)&lt;/p&gt;

&lt;h3 id=&quot;gnration-du-certificat&quot;&gt;Génération du certificat&lt;/h3&gt;
&lt;p&gt;Pensez à bien renseigner le FQDN DNS lors de la demande de Common Name pour le certificat.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;openssl genrsa -out ca.key 4096
openssl req -new -x509 -days 1826 -key ca.key -out ca.crt
openssl genrsa -out ia.key 4096
openssl req -new -key key.pem -out ia.csr #this is where you need to fill your FQDN
openssl x509 -req -days 730 -in ia.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out cert.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;gnration-des-mots-de-passes-basic-auth&quot;&gt;Génération des mots de passes basic auth&lt;/h3&gt;
&lt;p&gt;En utilisant un container docker qui embarque htpasswd vous pourrez générer facilement le fichier nécessaire : &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm -ti -v $(pwd):/tmp dgageot/htpasswd -c /tmp/docker-registry.htpasswd $MONUSER
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;dmarrage-du-registry&quot;&gt;Démarrage du registry&lt;/h2&gt;
&lt;p&gt;Les images seront stockées dans le répertoire &lt;code&gt;/srv/registry&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir /srv/registry
docker run -d --restart=always --name registry -v /srv/docker-registry:/registry -e &quot;SETTINGS_FLAVOR=local&quot; -e &quot;STORAGE_PATH=/registry&quot; registry
docker run -d --restart=always -p 443:443 -v /srv/registry-config:/etc/nginx/external --link registry:registry --name nginx-registry-proxy marvambass/nginx-registry-proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;configuration-dune-machine-cliente&quot;&gt;Configuration d’une machine cliente&lt;/h2&gt;

&lt;h3 id=&quot;importer-le-certificat-racine&quot;&gt;Importer le certificat racine&lt;/h3&gt;
&lt;p&gt;Il faut importer le certificat racine dans la liste des certificats reconnus&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo -s
mkdir -p /etc/docker/certs.d/$FQDN
cp ca.crt /etc/docker/certs.d/$FQDN/

mkdir -p /usr/local/share/ca-certificates/docker-ct
cp ca.crt /usr/local/share/ca-certificates/docker-ct/
update-ca-certificates-
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour vérifier que tout fonctionne comme attendu, vous pouvez voir si votre certificat ressort bien dans la commande suivante : &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;awk -v cmd='openssl x509 -noout -subject' ' /BEGIN/{close(cmd)};{print | cmd}' &amp;lt; /etc/ssl/certs/ca-certificates.crt | grep $(VOTRE IDENTIFIANT)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vous serez également certainement amené à redémarrer vos daemon docker (de chacune des machines)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl stop docker
systemctl start docker
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;identification-sur-le-dpot&quot;&gt;Identification sur le dépot&lt;/h3&gt;
&lt;p&gt;Une fois que toutes ces étapes sont effectuées, normalement votre dépot est prêt à être utilisé. &lt;/p&gt;

&lt;p&gt;Il vous faut cependant en première étape vous identifier à l’aide du couple utilisateur / mot de passe créé lors de l’installation : &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker login https://mondepotdocker.tld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ceci aura pour effet de créer un fichier &lt;code&gt;~/.dockercfg&lt;/code&gt; vous permettant d’accéder aux commandes suivantes sans avoir besoin de retaper vos identifiants.&lt;/p&gt;

&lt;h2 id=&quot;utilisation-du-dpt&quot;&gt;Utilisation du dépôt&lt;/h2&gt;

&lt;p&gt;Une fois la machine cliente configurée, vous pouvez simplement utiliser le dépot en préfixant les noms de vos images par l’URL du dépôt.
Par exemple, pour push/pull l’image de monapplication la commande suivante fera l’affaire :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker push mondepotdocker.tld/monapplication:v1.0.0
docker pull mondepotdocker.tld/monapplication:v1.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;utilisation-avec-docker-compose&quot;&gt;Utilisation avec docker-compose&lt;/h3&gt;

&lt;p&gt;Si vous utilisez docker-compose, il se peut que vous ayiez des soucis avec le certificat autosigné et/ou avec l’authentification.&lt;/p&gt;

&lt;p&gt;Pour contourner la vérification du certificat, vous pouvez simplement lancer &lt;code&gt;docker-compose&lt;/code&gt; avec le flag &lt;code&gt;--allow-insecure-ssl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pour ce qui est de l’authentification, une astuce simple pour contourner les problèmes de ce genre est de faire un &lt;code&gt;docker pull&lt;/code&gt; manuellement au préalable (le scripter depuis le fichier compose.yml n’est pas trop difficile).&lt;/p&gt;
</description>
                                <pubDate>Thu, 25 Jun 2015 00:00:00 +0200</pubDate>
                                <link>http://code-troopers.com/2015/06/25/InstallDockerRegistry.html</link>
                                <guid isPermaLink="true">http://code-troopers.com/2015/06/25/InstallDockerRegistry.html</guid>
                        </item>
                
                        <item>
                                <title>Améliorer la complétion JavaScript d'IntelliJ IDEA</title>
                                <description>&lt;h1 id=&quot;intellij-idea&quot;&gt;IntelliJ IDEA&lt;/h1&gt;
&lt;p&gt;Tout le monde sait que nous adorons utiliser IntelliJ IDEA pour développer. 
Peu importe le langage IntelliJ est vraiment un excellent IDE qui nous permet d’être efficaces quasiment instantanément.&lt;/p&gt;

&lt;p&gt;Par contre, quand on arrive dans le monde du JavaScript on peut avoir quelques soucis pour être 
dans un environnement suffisamment typé où l’on sait ce qu’on va faire sans se poser trop de questions, 
ou tout simplement pouvoir bénéficier de l’aide de l’IDE pour savoir de quelles méthodes on dispose.&lt;/p&gt;

&lt;!-- break --&gt;

&lt;h2 id=&quot;javascript-dans-intellij&quot;&gt;JavaScript dans IntelliJ&lt;/h2&gt;
&lt;p&gt;Par défaut, IntelliJ est déjà suffisament malin pour scanner les fichiers du workspace 
et trouver de la complétion en automatique (ainsi que la JSDoc).&lt;/p&gt;

&lt;p&gt;Cependant, ce mécanisme ne marche pas à tous les coups : &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;vous utilisez des versions sur des CDN&lt;/li&gt;
  &lt;li&gt;vous avez des versions minifiées dans votre workspace&lt;/li&gt;
  &lt;li&gt;vous utilisez des outils qui impliquent certains framework (karma / jasmine / mocha…)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;faire-comprendre-le-javascript--intellij&quot;&gt;Faire comprendre le JavaScript à IntelliJ&lt;/h2&gt;
&lt;p&gt;Pour réussir à obtenir une complétion correcte vous avez plusieurs solutions :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pour les CDN, vous pouvez demander à IntelliJ de récupérer la ressource (il ne la mettra pas dans votre projet pour autant)&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align:center;margin-bottom:50px&quot;&gt;
    &lt;a href=&quot;/images/2015-06-JavaScriptIntelliJ/cdndl.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Le téléchargement des fichiers sur un CDN [alt+entrée]&quot; class=&quot;inlineBoxes&quot;&gt;
        &lt;img class=&quot;medium&quot; src=&quot;/images/2015-06-JavaScriptIntelliJ/cdndl.png&quot; alt=&quot;Le téléchargement des fichiers sur un CDN [alt+entrée]&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;pour les versions minifiées, vous pouvez ajouter manuellement les bibliothèques dans la fenêtre de paramètres (Languages &amp;amp; Frameworks &amp;gt; JavaScript &amp;gt; Libraries)&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align:center;margin-bottom:50px&quot;&gt;
    &lt;a href=&quot;/images/2015-06-JavaScriptIntelliJ/settings.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;La fenêtre des paramètres&quot; class=&quot;inlineBoxes&quot;&gt;
        &lt;img class=&quot;medium&quot; src=&quot;/images/2015-06-JavaScriptIntelliJ/settings.png&quot; alt=&quot;La fenêtre des paramètres&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&quot;la-mega-astuce&quot;&gt;LA mega astuce&lt;/h2&gt;
&lt;p&gt;IntelliJ est capable de comprendre le TypeScript, et des gens ont eu la bonne idée de regrouper des définitions TypeScript pour
la plupart des librairies les plus utilisées dans un dépôt Github : &lt;a href=&quot;http://www.definitelytyped.org&quot;&gt;DefinitelyTyped&lt;/a&gt;.
Dans la fenêtre de création de librairie JavaScript, dans la partie qui permet le téléchargement d’une librairie, 
sélectionnez la source “TypeScript Community Stubs”, vous verrez qu’il y a beaucoup de librairies que vous utilisez au quotidien.&lt;/p&gt;

&lt;p&gt;Avec ceci, vous aurez une complétion efficace, avec le typage offert par TypeScript (dans la mesure du possible), 
ainsi qu’une documentation précise (pour la plupart des librairies).&lt;/p&gt;

&lt;div style=&quot;text-align:center;margin-bottom:50px&quot;&gt;
    &lt;a href=&quot;/images/2015-06-JavaScriptIntelliJ/example.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Jasmine est bien connu par IntelliJ&quot; class=&quot;inlineBoxes&quot;&gt;
        &lt;img class=&quot;medium&quot; src=&quot;/images/2015-06-JavaScriptIntelliJ/example.png&quot; alt=&quot;Jasmine est bien connu par IntelliJ&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;
</description>
                                <pubDate>Wed, 10 Jun 2015 00:00:00 +0200</pubDate>
                                <link>http://code-troopers.com/2015/06/10/CompletionJavascriptDansIntelliJ.html</link>
                                <guid isPermaLink="true">http://code-troopers.com/2015/06/10/CompletionJavascriptDansIntelliJ.html</guid>
                        </item>
                
                        <item>
                                <title>Android Support Design Library</title>
                                <description>&lt;p&gt;Avez-vous déjà essayé de transformer vos applications Android pour les rendre conformes aux &lt;a href=&quot;http://www.google.com/design/spec/material-design/introduction.html&quot;&gt;guidelines Material&lt;/a&gt;, si oui, vous avez dû comme nous, vous retrouver à importer plein de librairies tierces pour implémenter par exemple le &lt;code&gt;FAB button&lt;/code&gt;, ou même personnaliser le code pour rendre le &lt;code&gt;NavigationDrawer&lt;/code&gt; conforme (comme ce qui a pu être fait sur le squelette d’un &lt;a href=&quot;http://code-troopers.com/2014/11/26/SqueletteAndroid5.html&quot;&gt;précédent article&lt;/a&gt;. Et bien tout ceci est fini (enfin en partie), grâce à la nouvelle librairie Android de Google &lt;a href=&quot;http://developer.android.com/tools/support-library/features.html#design&quot;&gt;Design Support&lt;/a&gt;.&lt;/p&gt;

&lt;!--break--&gt;

&lt;div style=&quot;text-align:center&quot;&gt;
&lt;video width=&quot;270&quot; height=&quot;444&quot; controls=&quot;&quot;&gt;
  &lt;source src=&quot;/videos/designlibrary-cheesesquare.mp4&quot; type=&quot;video/mp4&quot; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;/div&gt;

&lt;p&gt;Pour le moment elle permet d’implémenter les composants Material suivants :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TextInputLayout&lt;/li&gt;
  &lt;li&gt;FloatingActionButton&lt;/li&gt;
  &lt;li&gt;Snackbar&lt;/li&gt;
  &lt;li&gt;TabLayout&lt;/li&gt;
  &lt;li&gt;NavigationView&lt;/li&gt;
  &lt;li&gt;CoordinatorLayout&lt;/li&gt;
  &lt;li&gt;AppBarLayout&lt;/li&gt;
  &lt;li&gt;CollapsingToolbarLayout&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Je vous laisse consulter les différents articles trouvés sur le sujet pour avoir plus de détails :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://android-developers.blogspot.fr/2015/05/android-design-support-library.html&quot;&gt;L’article sur l’Android developers blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/android-bites/first-steps-with-the-design-support-library-8dcf06230ddd&quot;&gt;L’article sur medium.com&lt;/a&gt; : qui montre les nouveautés grâce à des petites vidéos mais montre aussi les problèmes (sûrement corrigés au moment où vous lirez cet article)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://antonioleiva.com/navigation-view/&quot;&gt;Un bout d’exemple avec du code pour le NavigationView&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enfin, voici le &lt;a href=&quot;https://github.com/chrisbanes/cheesesquare&quot;&gt;lien&lt;/a&gt; vers le code source de l’application exemple faite par &lt;a href=&quot;https://chris.banes.me/&quot;&gt;Chris Banes&lt;/a&gt;, montrant les principales nouveautés de cette librairie.&lt;/p&gt;

&lt;p&gt;À vos applications !&lt;/p&gt;

</description>
                                <pubDate>Sat, 06 Jun 2015 00:00:00 +0200</pubDate>
                                <link>http://code-troopers.com/2015/06/06/AndroidDesignLibrary.html</link>
                                <guid isPermaLink="true">http://code-troopers.com/2015/06/06/AndroidDesignLibrary.html</guid>
                        </item>
                
                        <item>
                                <title>git : quelques astuces de configuration pour vos dotfiles</title>
                                <description>&lt;p&gt;Cet article est le deuxième de la série des &lt;em&gt;dotfiles&lt;/em&gt;. Voir l’article sur &lt;a href=&quot;code-troopers.com/2015/05/15/Dotfiles-vim.html&quot;&gt;vimrc&lt;/a&gt;. Nous allons ici aborder quelques configurations indispensables de git.&lt;/p&gt;

&lt;h1 id=&quot;la-base&quot;&gt;La base&lt;/h1&gt;

&lt;p&gt;Si vous utilisez git, vous avez forcément fait des commandes de base pour rentrer votre nom et votre email (indispensable pour pusher vos commits)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git config --global user.name &quot;Jango Fett&quot; 
$ git config --global user.email &quot;jango.fett@code-troopers.com&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ceci a pour but d’écrire dans votre fichier ~/.gitconfig ces simples lignes :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[user]
    name = Jango Fett
    email = jango.fett@code-troopers.com
&lt;/code&gt;&lt;/pre&gt;

&lt;!--break--&gt;

&lt;h1 id=&quot;un-peu-de-couleurs&quot;&gt;Un peu de couleurs&lt;/h1&gt;
&lt;p&gt;C’est toujours important d’avoir de la couleur, ça donne bonne mine, ça rend joyeux mais surtout ça aide à la lisibilité. Dans les dernières version de git, la couleur est activée automatiquement, mais vous pouvez toujours la modifier ! Voici un exemple de configuration :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[color &quot;branch&quot;]
    current = yellow reverse
    local = yellow
    remote = green
[color &quot;diff&quot;]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[color &quot;status&quot;]
    added = yellow
    changed = green
    untracked = cyan
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&quot;text-align:center;margin-bottom:50px&quot;&gt;
    &lt;a href=&quot;/images/postDotfilesGit/gitcolours.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;git avec couleurs personnalisées&quot; class=&quot;inlineBoxes&quot;&gt;
        &lt;img class=&quot;medium&quot; src=&quot;/images/postDotfilesGit/gitcolours.png&quot; alt=&quot;git avec couleurs personnalisées&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h1 id=&quot;gitignore-global&quot;&gt;gitignore global&lt;/h1&gt;
&lt;p&gt;Parfois vous arrivez dans un environnement où personne n’utilise IntelliJ, peut-être même que vous voulez cacher le fait que vous utilisez IDEA. Dans ce cas, pas besoin de commiter un .gitignore qui contient &lt;code&gt;.idea&lt;/code&gt; et &lt;code&gt;*.iml&lt;/code&gt; mettez le plutôt dans &lt;code&gt;~/.gitignore&lt;/code&gt;. Pour que ça marche, vous devrez rajouter dans votre &lt;code&gt;~/.gitconfig&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[core]
    excludesfile = ~/.gitignore
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;j3-vim&quot;&gt;J’&amp;lt;3 vim&lt;/h1&gt;
&lt;p&gt;J’aime vim, alors je le met partout. Besoin d’un éditeur de texte pour les commits ? vim !&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[core]
    editor = vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Besoin d’un outil pour faire des diff ? vim !&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[merge] 
    tool = vimdiff
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;montre-nous-tes-fichiers&quot;&gt;Montre-nous tes fichiers&lt;/h1&gt;
&lt;p&gt;Vous avez créé un nouveau répertoire, ajouté plein de fichiers dedans, et vous revenez en console pour voir ce qu’il y a à commiter. Soit un cas d’utilisation quotidien ou presque. Sauf que quand vous faîtes &lt;code&gt;git status&lt;/code&gt; seul le répertoire apparaît et pas les fichiers à l’intérieur ! Pour y remédier :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[status]
    showUntrackedFiles = all
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&quot;text-align:center;margin-bottom:50px&quot;&gt;
    &lt;a href=&quot;/images/postDotfilesGit/git-status.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;git status coloré&quot; class=&quot;inlineBoxes&quot;&gt;
        &lt;img class=&quot;medium&quot; src=&quot;/images/postDotfilesGit/git-status.png&quot; alt=&quot;git status coloré&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h1 id=&quot;alias&quot;&gt;Alias&lt;/h1&gt;
&lt;p&gt;Comme pour les shell, on peut créer des alias de commande. Par exemple :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[alias] 
    cp = cherry-pick
    co = checkout
    cl = clone
    ci = commit 
    br = branch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C’est plus rapide à taper… un peu, et encore faut s’en souvenir que cp ça fait cherry-pick. Mais certaines commandes sont longues et là ça devient encore plus pertinent :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    last = log -1 --stat
    st = status -sb
    unstage = reset HEAD --
    dc = diff --cached
    pr = pull --rebase
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %Cblue&amp;lt;%an&amp;gt;%Creset' --abbrev-commit --date=relative --all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Je vous laisse essayer celles qui ne sont pas explicite ;)&lt;/p&gt;

&lt;h1 id=&quot;les-hooks&quot;&gt;Les Hooks&lt;/h1&gt;
&lt;p&gt;Il y a beaucoup d’options et de choses à faire mais je terminerai cet article avec les hooks, qui mériteraient peut-être à eux seuls un article. Un hook −qui se traduit par « crochet »− va intercepter une commande afin de réaliser une action. Par exemple, quand je lance la commande commit, je veux vérifier que tous les tests passent, ou quand je push, je veux mettre à jour automatiquement le ticket jira associé, on peut vraiment tout faire vu qu’il s’agit juste de scripts à rajouter.&lt;/p&gt;

&lt;p&gt;On a d’abord besoin de définir le répertoire qui va contenir les hooks. Vous pouvez ajouter dans votre &lt;code&gt;~/.gitconfig&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[init]
    templatedir = ~/.git_template
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Par exemple si vous voulez rajouter un script qui interdit de commiter &lt;code&gt;System.out.println&lt;/code&gt;, vous pouvez créer ce fichier : &lt;code&gt;~/.git_template/hooks/pre-commit&lt;/code&gt;
J’ai récupéré le mien sur https://github.com/borisguery/git-keywords-checker sur lequel j’ai juste modifié les deux variables KEYWORDS_REGEX et EXTENSIONS_REGEX. Ce qui donne grosso modo dans le fichier :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;5 # Add or remove keywords here
6 KEYWORDS_REGEX=&quot;printStackTrace\(|FIXME|TODO&quot;
7 # Add extensions to check here
8 EXTENSIONS_REGEX=&quot;(.java$|.js$)&quot; On interdit de commiter `printStackTrace(` ou `FIXME` ou `TODO` dans les fichiers `java` ou `js`.
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&quot;text-align:center;margin-bottom:50px&quot;&gt;
    &lt;a href=&quot;/images/postDotfilesGit/git-hooks.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;git hooks pre-commit en action&quot; class=&quot;inlineBoxes&quot;&gt;
        &lt;img class=&quot;medium&quot; src=&quot;/images/postDotfilesGit/git-hooks.png&quot; alt=&quot;git hooks pre-commit en action&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Oui ça paraît un peu violent d’interdire le commit de TODO et FIXME mais on peut passer outre en commitant avec l’option &lt;code&gt;--no-verify&lt;/code&gt; et au moins on est au courant donc on n’oublie pas les actions nécessaires selon les équipes de travail (ajout d’un post-it, d’une carte trello etc.)&lt;/p&gt;

&lt;p&gt;2 petits détails pour que ça marche :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Il faut que le script soit exécutable, donc vous pouvez faire &lt;code&gt;chmod +x ~/.git_template/hooks/pre-commit&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Ce sera actif uniquement sur les nouveaux dépôts, pour activer le hook sur les dépôts existants, vous devez faire un &lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si vous voulez d’autres exemples de hooks, vous pouvez commencer par jeter un œil aux hooks de &lt;a href=&quot;https://github.com/petervanderdoes/git-flow-hooks&quot;&gt;git-flow&lt;/a&gt;&lt;/p&gt;

</description>
                                <pubDate>Fri, 22 May 2015 00:00:00 +0200</pubDate>
                                <link>http://code-troopers.com/2015/05/22/Dotfiles-git.html</link>
                                <guid isPermaLink="true">http://code-troopers.com/2015/05/22/Dotfiles-git.html</guid>
                        </item>
                
                        <item>
                                <title>vim : 10 astuces de configuration pour vos dotfiles</title>
                                <description>&lt;p&gt;Cet article sera le premier d’une série consacrée aux &lt;em&gt;dotfiles&lt;/em&gt;. Alors les &lt;em&gt;dotfiles&lt;/em&gt;, qu’est-ce que c’est Obi-Wan ? Les &lt;em&gt;dotfiles&lt;/em&gt;, ce sont tous les fichiers texte de configuration que l’on peut retrouver dans son répertoire utilisateur pour sauvegarder ses préférences. De nombreux logiciels utilisent cette méthode. On peut citer gnome, IntelliJ, Maven,  ssh, git, bash et tant d’autres. On les appelle &lt;em&gt;dotfiles&lt;/em&gt; −que l’on peut traduire par fichiers point− parce qu’ils ont un nom qui commence par un point, ce qui correspond aux fichiers cachés sous linux.&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Chez les troopers, on est comme beaucoup d’autres constamment alliés à la ligne de commande, cf nos articles sur &lt;a href=&quot;http://code-troopers.com/2014/10/01/babun.html&quot;&gt;babun&lt;/a&gt; et &lt;a href=&quot;http://code-troopers.com/2014/09/17/ohMyZsh.html&quot;&gt;oh-my-zsh&lt;/a&gt;. Un outil indispensable dans un terminal est un éditeur de fichier. Dans notre premier article sur les &lt;em&gt;dotfiles&lt;/em&gt; nous parlerons de vim, et plus spécialement de sa configuration avec vimrc. Si vous ne connaissez pas l’un des plus puissants éditeur de texte, commencez par vous renseigner dessus et sur les commandes de base par exemple sur &lt;a href=&quot;http://www.openvim.com/tutorial.html&quot;&gt;http://www.openvim.com/tutorial.html&lt;/a&gt;.
Pour configurer vim, une seule chose à faire : &lt;code&gt;vim ~/.vimrc&lt;/code&gt;
&lt;!--break--&gt;&lt;/p&gt;

&lt;h1 id=&quot;sauvez-cest-activ&quot;&gt;Sauvez c’est activé&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;if has(&quot;autocmd&quot;)
    autocmd! bufwritepost .vimrc source ~/.vimrc
endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De base sous vim on édite son .vimrc, on quitte et on réouvre un fichier pour voir la modification. Grâce à ces lignes, il suffira de sauvegarder pour voir ses modifications actives dans toutes les instances ouvertes de vim. &lt;/p&gt;

&lt;div style=&quot;text-align: center;margin:50px;&quot;&gt;
&lt;video style=&quot;width: 90%; max-width: 600px;&quot; controls=&quot;&quot; src=&quot;/videos/dotfiles-saveactif.webm&quot;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h1 id=&quot;en-parlant-de-sauvegarde&quot;&gt;En parlant de sauvegarde&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;noremap &amp;lt;C-Z&amp;gt; :update&amp;lt;CR&amp;gt;
vnoremap &amp;lt;C-Z&amp;gt; &amp;lt;C-C&amp;gt;:update&amp;lt;CR&amp;gt;
inoremap &amp;lt;C-Z&amp;gt; &amp;lt;C-O&amp;gt;:update&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour sauvegarder sous vim, il faut faire &lt;code&gt;:w&lt;/code&gt; Ce serait quand même mieux de faire &lt;code&gt;ctrl-z&lt;/code&gt; un peu à l’image des &lt;code&gt;ctrl-s&lt;/code&gt; que l’on trouve partout ailleurs. &lt;/p&gt;

&lt;div style=&quot;text-align: center;margin:50px;&quot;&gt;
&lt;video style=&quot;width: 90%; max-width: 600px;&quot; controls=&quot;&quot; src=&quot;/videos/dotfiles-ctrlz.webm&quot;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h1 id=&quot;et-pourquoi-pas-ctrl-s&quot;&gt;Et pourquoi pas ctrl-s&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;inoremap &amp;lt;C-c&amp;gt; &amp;lt;Left&amp;gt;
inoremap &amp;lt;C-t&amp;gt; &amp;lt;Down&amp;gt;
inoremap &amp;lt;C-s&amp;gt; &amp;lt;Up&amp;gt;
inoremap &amp;lt;C-r&amp;gt; &amp;lt;Right&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ça pose un problème car ctrl-s me permet de me déplacer vers le haut dans vim en mode &lt;strong&gt;insertion&lt;/strong&gt;.
Selon la disposition de votre clavier, vous pouvez remplacer &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, &lt;code&gt;r&lt;/code&gt; par &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt; si vous avez un clavier azerty. Ainsi les touches &lt;code&gt;hjkl&lt;/code&gt; permettent de se déplacer en mode &lt;strong&gt;visuel&lt;/strong&gt; et &lt;code&gt;ctrl + hjkl&lt;/code&gt; permettent de se déplacer en mode &lt;strong&gt;insertion&lt;/strong&gt;. Plus aucune raison d’utiliser les flèches sous vim !&lt;/p&gt;

&lt;div style=&quot;text-align: center;margin:50px;&quot;&gt;
&lt;video style=&quot;width: 90%; max-width: 600px;&quot; controls=&quot;&quot; src=&quot;/videos/dotfiles-ctrlctsr.webm&quot;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h1 id=&quot;un-peu-de-couleurs&quot;&gt;un peu de couleurs&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;syntax on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vim connaît à peu près tous les langages, de Shell à Java, en passant par le XML ou les simples fichiers de configuration. Avec cette commande,  vous aurez donc automatiquement la coloration syntaxique. &lt;/p&gt;

&lt;div style=&quot;text-align: center;margin:50px;&quot;&gt;
&lt;video style=&quot;width: 90%; max-width: 600px;&quot; controls=&quot;&quot; src=&quot;/videos/dotfiles-syntax.webm&quot;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h1 id=&quot;set-nu&quot;&gt;set nu&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;set number
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour afficher les numéros de ligne on peut taper &lt;code&gt;:set nu&lt;/code&gt;. La commande est certes rigolote à écrire (comprenne qui pourra) mais ça ne suffit pas pour se retenir de l’automatiser.&lt;/p&gt;

&lt;div style=&quot;text-align: center;margin:50px;&quot;&gt;
&lt;video style=&quot;width: 90%; max-width: 600px;&quot; controls=&quot;&quot; src=&quot;/videos/dotfiles-setnu.webm&quot;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h1 id=&quot;viter-la-touche-chap&quot;&gt;Éviter la touche échap&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;inoremap éé &amp;lt;esc&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour sortir du mode &lt;strong&gt;insertion&lt;/strong&gt;, il faut appuyer sur la touche échap par défaut. Même pour un pianiste, cette touche est trèèèèès loin sur le clavier. Mais vous pouvez bien évidemment remapper cette action. Si vous voulez des inspirations sur les meilleures combinaisons, vous pouvez regarder là : &lt;a href=&quot;http://vim.wikia.com/wiki/Avoid_the_escape_key&quot;&gt;http://vim.wikia.com/wiki/Avoid_the_escape_key&lt;/a&gt;
Comme je suis en bépo (au lieu de azerty) et que je n’écris presque jamais de français avec vim, j’ai utilisé le mot clé &lt;code&gt;éé&lt;/code&gt;. Certains mappent sur &lt;code&gt;ii&lt;/code&gt; mais vim marquera une légère pause à chaque appui sur la touche i qui est assez déstabilisant.&lt;/p&gt;

&lt;div style=&quot;text-align: center;margin:50px;&quot;&gt;
&lt;video style=&quot;width: 90%; max-width: 600px;&quot; controls=&quot;&quot; src=&quot;/videos/dotfiles-exitee.webm&quot;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h1 id=&quot;pathogenhttpsgithubcomtpopevim-pathogen&quot;&gt;&lt;a href=&quot;https://github.com/tpope/vim-pathogen&quot;&gt;pathogen&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;On peut faire tellement de choses, ça prendrait des semaines pour tout configurer. Pour avoir d’autres features super cool en 2 secondes,  on peut ajouter des plugins. Le gestionnaire de plugin le plus connu pour vim est sans doute pathogen.
Pour l’installation, il suffit de faire :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ~/.vim/autoload ~/.vim/bundle &amp;amp;&amp;amp; \
curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Maintenant, passons à quelques plugins.&lt;/p&gt;

&lt;h2 id=&quot;colorscheme-couleurs&quot;&gt;Colorscheme couleurs&lt;/h2&gt;
&lt;p&gt;Les couleurs sont ternes ? le bleu sur noir des commentaires est illisible ? Alors changez les couleurs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/.vim/bundle
git clone https://github.com/flazz/vim-colorschemes.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ajoutez ensuite &lt;code&gt;colors matrix&lt;/code&gt; dans votre &lt;code&gt;.vimrc&lt;/code&gt;. La liste des template de couleurs utilisables se trouvent dans &lt;code&gt;~/.vim/bundle/colorschemes/colors&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;margin:50px;&quot;&gt;
&lt;video style=&quot;width: 90%; max-width: 600px;&quot; controls=&quot;&quot; src=&quot;/videos/dotfiles-colormatrix.webm&quot;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h2 id=&quot;nerdtree&quot;&gt;nerdtree&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;cd ~/.vim/bundle
git clone https://github.com/scrooloose/nerdtree.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et ajoutez dans votre &lt;code&gt;.vimrc&lt;/code&gt; : &lt;code&gt;map &amp;lt;C-n&amp;gt; :NERDTreeToggle&amp;lt;CR&amp;gt;&lt;/code&gt;
Dorénavant, il vous suffira de faire ctrl-n pour avoir votre répertoire de travail comme dans n’importe quel autre IDE.&lt;/p&gt;

&lt;div style=&quot;text-align: center;margin:50px;&quot;&gt;
&lt;video style=&quot;width: 90%; max-width: 600px;&quot; controls=&quot;&quot; src=&quot;/videos/dotfiles-nerttree.webm&quot;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h2 id=&quot;nerdcommenter&quot;&gt;nerdcommenter&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;cd ~/.vim/bundle
git clone https://github.com/scrooloose/nerdcommenter.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Et dans votre &lt;code&gt;.vimrc&lt;/code&gt; : &lt;code&gt;filetype plugin on&lt;/code&gt;
aintenant, en faisant &lt;code&gt;&amp;lt;Leader&amp;gt;cc&lt;/code&gt; que ce soit dans un fichier html, java, python, shell etc. la ligne se mettra en commentaire. Vous pouvez aussi le faire après avoir sélectionné plusieurs lignes.
Si vous vous demandez ce qu’est la touche &lt;code&gt;&amp;lt;Leader&amp;gt;&lt;/code&gt; c’est une touche définie pour faire certaines actions. Par défaut il s’agit de la touche &lt;code&gt;\&lt;/code&gt;mais vous pouvez évidemment la remapper. J’utilise la touche &lt;code&gt;,&lt;/code&gt; pour ma part grâce à : &lt;code&gt;let mapleader=&quot;,&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align: center;margin:50px;&quot;&gt;
&lt;video style=&quot;width: 90%; max-width: 600px;&quot; controls=&quot;&quot; src=&quot;/videos/dotfiles-comment.webm&quot;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;h1 id=&quot;aller-plus-loin&quot;&gt;Aller plus loin&lt;/h1&gt;

&lt;p&gt;En attendant d’autres articles sur les &lt;em&gt;dotfiles&lt;/em&gt;, ou pour aller plus loin dans la configuration de vim, vous pouvez aller faire un tour sur github qui regorge de &lt;em&gt;dotfiles&lt;/em&gt; pour quasiment tous les softs.&lt;/p&gt;

&lt;h1 id=&quot;bonus&quot;&gt;Bonus&lt;/h1&gt;

&lt;p&gt;Si vous aimez vim et IntelliJ, vous pouvez installer le plugin ideavim qui permet d’avoir vim comme éditeur de texte et depuis quelques mois vous pouvez même importer vos settings vim dans le plugin :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat ~/.ideavimrc
source ~/.vimrc
&lt;/code&gt;&lt;/pre&gt;
</description>
                                <pubDate>Fri, 15 May 2015 00:00:00 +0200</pubDate>
                                <link>http://code-troopers.com/2015/05/15/Dotfiles-vim.html</link>
                                <guid isPermaLink="true">http://code-troopers.com/2015/05/15/Dotfiles-vim.html</guid>
                        </item>
                
                        <item>
                                <title>Devoxx 2015 : c'était bien, mais...</title>
                                <description>&lt;p&gt;Cette année nous étions tous les Troopers à nous rendre à Paris pour LA conférence à ne pas rater.&lt;/p&gt;

&lt;p&gt;Pour ceux qui n’auraient pas vu l’info sur &lt;a href=&quot;https://twitter.com/search?q=%23DevoxxFR&amp;amp;src=tyah&quot;&gt;Twitter&lt;/a&gt; ou ailleurs, pour la première fois nous étions au Palais des Congrès, et ça on peut dire que c’est la classe.&lt;/p&gt;

&lt;!-- break --&gt;

&lt;p&gt;Mais, dans cet article, je ne vais pas vous faire un résumé des conférences que j’ai vues, d’abord parce que je n’ai pas pris de notes, 
ensuite parce que beaucoup d’autres le font déjà, par exemple &lt;a href=&quot;http://agileek.github.io/&quot;&gt;là&lt;/a&gt; et &lt;a href=&quot;http://javamind-fr.blogspot.fr/&quot;&gt;là&lt;/a&gt;, et surtout parce que toutes les sessions étaient filmées et 
seront mises en ligne sur Parleys et accessibles gratuitement (comme les autres années). 
Je vous conseille par exemple &lt;a href=&quot;https://www.parleys.com/tutorial/java-8-streams-collectors-patterns-performances-parallelisation&quot;&gt;les streams Java 8 de José Paumard&lt;/a&gt; 
si vous n’êtes toujours pas familiers de la chose.&lt;/p&gt;

&lt;p&gt;Ce que je vais vous raconter dans cet article, ce sont les &lt;code&gt;mais&lt;/code&gt;, parce que &lt;em&gt;Devoxx c’est bien mais…&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Car finalement assez peu de personnes en parlent. Et comme en France on aime bien se plaindre (et que je suis un bon français), je veux  bien endosser le rôle du râleur.&lt;/p&gt;

&lt;p&gt;Première chose, sûrement la plus flagrante (et déjà discutée) &lt;strong&gt;les paniers repas&lt;/strong&gt;. 
En effet je trouve tout simplement aberrante l’utilisation de ces petites sacoches pour la distribution des repas. 
Car si elles sont dites réutilisables, 90% d’entre elles ont dû finir à la poubelle. 
J’ai pu lire qu’elles sont faites en fibres biodégradables, ce qui est bien, mais un produit créé pour finir dans la poubelle 5 min après son utilisation ça reste un gaspillage totalement inutile. 
D’après ce que j’ai compris d’un rapide échange avec une personne de l’orga, ce n’est pas ce qui avait été prévu/commandé. Dans tous les cas, 
je ne vois pas comment la société en face peut se dire écolo (ou tenter de le faire croire) en proposant une prestation qui consiste à fournir 3 jours de suite aux mêmes personnes le même mini sac réutilisable. 
Il ne faut pas lire l’avenir dans les foies de mouton¹ pour se douter qu’au moins deux tiers vont finir à la poubelle.&lt;/p&gt;

&lt;div style=&quot;text-align:center;margin:50px&quot;&gt;
  &lt;a href=&quot;/images/postDevoxx2015/devoxx2015_1.jpg&quot; data-lightbox=&quot;group-2&quot; title=&quot;Les sac pour les sandwichs...&quot; class=&quot;inlineBoxes&quot;&gt;
    &lt;img class=&quot;medium&quot; src=&quot;/images/postDevoxx2015/devoxx2015_1.jpg&quot; alt=&quot;Les sac pour les sandwichs...&quot; /&gt;
  &lt;/a&gt;
  &lt;a href=&quot;/images/postDevoxx2015/devoxx2015_2.jpg&quot; data-lightbox=&quot;group-2&quot; title=&quot;... qui finissent à la poubelle&quot; class=&quot;inlineBoxes&quot;&gt;
    &lt;img class=&quot;medium&quot; src=&quot;/images/postDevoxx2015/devoxx2015_2.jpg&quot; alt=&quot;... qui finissent à la poubelle&quot; /&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Et en parlant de poubelles, on peut aussi vivement critiquer le Palais des Congrès lui même qui ne propose aucune solution de tri sélectif, tous les déchets finissant au même endroit…
C’est d’ailleurs bien dommage car plusieurs personnes ont tenté de trier les sacoches des autres déchets en les mettant de côté dans des cartons vides, mais à chaque fois le personnel du Palais des Congrès récupérait tout dans leurs grandes poubelles. Peut-être parce qu’ils facturent une partie de leur prestation au volume de déchets…&lt;/p&gt;

&lt;p&gt;Ensuite j’aimerais vous faire part de mon indignation² envers &lt;strong&gt;le comportement des participants&lt;/strong&gt; lors des confs, quickies et autres sessions. 
Je trouve qu’un très grand nombre de personnes a fait preuve d’irrespect, d’incivisme ou tout autre adjectif de ce genre par bien des manières. 
La principale étant de quitter la salle avant la fin de la présentation elle même, souvent au début des questions, pour se rendre le plus vite possible ailleurs (au buffet ou dans une autre salle je suppose) 
et je ne parle pas là d’une ou deux personnes lors d’une ou deux sessions, mais d’au moins une quinzaine et à chaque session. Les questions font partie intégrante d’une session et même si le sujet ne nous a finalement pas intéressés, ce n’est pas un gros effort que de rester assis 5 minutes de plus et ainsi permettre aux autres personnes, qui elles étaient intéressées, de pouvoir entendre dans le calme les questions/réponses.&lt;/p&gt;

&lt;p&gt;Toujours sur le thème de l’incivilité, je trouve scandaleux la quantité de déchets laissés par terre les deux premiers jours. Sachant qu’il y avait des poubelles quasiment à chaque sortie de salle. Je ne comprends pas ces comportements (les gens font ça aussi chez eux et sur leur lieu de travail ?)&lt;/p&gt;

&lt;p&gt;Pour finir j’aimerais aborder un sujet de beaucoup plus subjectif, &lt;strong&gt;le niveau des conférences&lt;/strong&gt;. En effet j’ai (avis personnel, donc) 
eu le sentiment que, par rapport à l’année dernière, le niveau était en deçà. J’en ai déjà pas mal discuté et plusieurs personnes ne sont pas de cet avis. 
Il est donc assez probable que ce soit dû aux choix que j’ai fait plutôt qu’à l’ensemble des conférences disponibles. &lt;/p&gt;

&lt;p&gt;Mais dans ce cas là, ne faudrait-il pas que le niveau estimé de la conf soit annoncé avant, afin de limiter les déceptions et de mieux cibler le public (par exemple avec des labels &lt;em&gt;débutant, medium, avancé&lt;/em&gt; sur le programme) ?&lt;/p&gt;

&lt;p&gt;Tout cela n’est aucunement une charge contre l’orga qui a, encore une fois, fait un boulot extraordinaire pour réunir &lt;code&gt;2509&lt;/code&gt; &lt;em&gt;développeurs (et développeuses) passionné(e)s&lt;/em&gt; au Palais des Congrès. 
Et parce que pouvoir assister à une conf de &lt;a href=&quot;https://twitter.com/briangoetz&quot;&gt;Brian Goetz&lt;/a&gt; (architecte de java), ça n’arrive pas tous les jours, je serai présent l’année prochaine. &lt;/p&gt;

&lt;p&gt;PS : Pour voir quelques photos, il y a le site de &lt;a href=&quot;http://www.devoxx.fr/2015/04/devoxx-france-2015-en-images/&quot;&gt;Devoxx France&lt;/a&gt; et aussi ce &lt;a href=&quot;https://m.flickr.com/#/photos/123583479@N03/sets/72157651881953421&quot;&gt;compte flickr&lt;/a&gt;. Sinon, vous avez toujours internet.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;¹ : Référence au discours de Charles-Alexandre Sabourdin qui a animé les deux keynotes.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;² : oui oui, carrément !&lt;/small&gt; &lt;/p&gt;
</description>
                                <pubDate>Wed, 15 Apr 2015 00:00:00 +0200</pubDate>
                                <link>http://code-troopers.com/2015/04/15/DevoxxFR-2015.html</link>
                                <guid isPermaLink="true">http://code-troopers.com/2015/04/15/DevoxxFR-2015.html</guid>
                        </item>
                
                        <item>
                                <title>Retour sur le Second #SWTours</title>
                                <description>&lt;p&gt;Ce weekend a eu lieu la seconde édition du Startup Weekend Tours, organisé par Palo Altours. 
Cette année nous avons pris possession du futur lieu emblématique de l’activité numérique tourangelle : le site de l’ancienne imprimerie MAME.&lt;/p&gt;

&lt;p&gt;Nous étions 4 Troopers venus pour apporter un soutien technique aux pitchs les plus funs et les plus intéressants du weekend. 
Premier changement pour nous par rapport à l’an dernier, nous avions décidé de ne pas tous travailler sur le même projet. 
Un petit challenge en plus car en divisant nos forces on savait qu’on allait perdre en efficacité et en rapidité de développement, ce qui peut être déterminant en 54h.
Nous n’étions pas non plus venus avec une idée de pitch, ce qui nous a permis de nous concentrer sur la partie technique.
&lt;!--break--&gt;&lt;/p&gt;

&lt;h1 id=&quot;rsum-dun-weekend-intense&quot;&gt;Résumé d’un weekend intense&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;vendredi---18h--pitchs-et-choix-des-projets&quot;&gt;Vendredi - 18h : pitchs et choix des projets&lt;/h2&gt;
&lt;p&gt;En tant que dev c’est le moment le plus complexe : plein d’idées, plein de monde, plein de sollicitations et un choix à faire vite ! Très vite !
Comme l’année dernière, il n’y a pas énormément de dev et les porteurs de projet (souvent business) ont presque tous besoin de dev dans leur équipe. 
Et ce n’est pas facile de refuser un appel à l’aide. 
Mais il faut faire un choix et en plus il faut faire le tri entre les projets qui semblent intéressants et ceux où il y a un minimum de dev à faire, car on est venu pour ça.
Après avoir pris notre temps pour faire le tour de tous les projets, voici notre verdict : &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Matthieu va travailler sur &lt;em&gt;TIM&lt;/em&gt; : une plate-forme qui permet de prendre rendez-vous chez des professionnels de tous genres (coiffeur, plombier…),&lt;/li&gt;
  &lt;li&gt;Vincent va travailler sur &lt;em&gt;Roadmad&lt;/em&gt; : une application pour trouver des lieux insolites localement,&lt;/li&gt;
  &lt;li&gt;Joris et moi, enfin, allons travailler sur &lt;em&gt;OnAssur&lt;/em&gt; : une plate-forme qui va nous aider dans la compréhension et la gestion de nos contrats d’assurance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;vendredi---21h--lquipe-&quot;&gt;Vendredi - 21h : l’équipe !&lt;/h2&gt;

&lt;p&gt;Les équipes formées, les hostilités peuvent commencer.
Il faut affiner le concept, définir le MVP (Most Valuable Product), trouver un nom, une identité. Il faut aller vite tout en laissant à tout le monde la possibilité de s’exprimer.
Nous sommes 9 dans notre équipe, ce qui fait du monde à découvrir en peu de temps pour réussir à communiquer efficacement.&lt;/p&gt;

&lt;p&gt;Petit tour de table de notre équipe : &lt;a href=&quot;https://twitter.com/MelodieFourez&quot;&gt;Mélodie&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/SandeauGruberS&quot;&gt;Stéphane&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/MarieCottu&quot;&gt;Marie&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/maximepvrt&quot;&gt;Maxime&lt;/a&gt;,
 &lt;a href=&quot;https://twitter.com/loustalotbene&quot;&gt;Bénédicte&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/alexescu&quot;&gt;Alexis&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/victor_proust&quot;&gt;Victor&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/Joris_Potier&quot;&gt;Joris&lt;/a&gt; et &lt;a href=&quot;https://twitter.com/FlorianChauveau&quot;&gt;moi&lt;/a&gt;
 (quelques têtes déjà vues, mais personne avec qui nous avions déjà travaillé : &lt;em&gt;challenge accepted&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;On ne sait pas encore où on va, mais côté dev il faut déjà avancer. Maxime est venu avec une stack AngularJS + Google endpoint. Parfait, ce sera simple à héberger, on peut au moins commencer à commiter sur son repo github.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;vendredi---plus-tard-dans-la-soire--on-a-un-nom-&quot;&gt;Vendredi - “plus tard dans la soirée” : on a un nom !&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Kaléméon&lt;/code&gt;
Marie, notre super graphiste, a trouvé un lien entre le caméléon et sa vision à 360° et la solution que l’on souhaite apporter à nos utilisateurs : toute l’équipe valide !&lt;/p&gt;

&lt;p&gt;Côté business Stéphane, Mélodie, Bénédicte et Alexis ont plein d’idées, et Victor est là pour apporter son expertise, en tant qu’étudiant en droit c’est pile la personne qu’il fallait.&lt;/p&gt;

&lt;p&gt;Il reste Maxime, Joris et moi, on a entammé le dev en partant des vagues concepts métier évoqués : des assurances, des contrats, des mots clés et des assurés. &lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;samedi---10h--au-travail&quot;&gt;Samedi - 10h : au travail&lt;/h2&gt;
&lt;p&gt;L’objectif de la journée : avoir un MVP avec une démo fonctionnelle.
On essaie donc de définir un certain nombre de &lt;em&gt;use case&lt;/em&gt; et la trame que l’on souhaite présenter lors de la démo. 
Cela nous permet d’affiner en grande partie le dev qu’on a à faire. Joris se concentre sur les endpoints, de mon coté je gère la partie front en angular et Maxime me file un coup de main pour l’interface en intégrant les visuels de Marie.&lt;/p&gt;

&lt;p&gt;De l’autre coté de la table, ça bouge beaucoup aussi. Mais je n’écoute que d’une oreille car je suis concentré.
Au milieu de l’après-midi, Stéphane, Alexis, Victor et Bénédicte sortent sonder des gens dans la rue. Ils sont partis sur le terrain pour tester nos choix et idées avec des ‘vrais’ gens. 
C’est une étape indispensable du weekend. Les retours des personnes sondées sont super positifs, donc on va en mettre dans la présentation finale. 
Ils enchainent sur le &lt;em&gt;Business Model Canevas&lt;/em&gt;, là je suis complètement largué, et aussi admiratif de ce qu’ils arrivent à faire en si peu de temps.&lt;/p&gt;

&lt;p&gt;Sur la partie dev ça se passe bien, à peine quelques conflits de commit, mais c’est normal vu qu’on travaille sur les mêmes fichiers.
5h30 (oui oui le temps passe vraiment aussi vite) : il est temps d’aller dormir. Je laisse Marie et Maxime qui ont encore des ressources insoupçonnées. &lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dimanche---10h--un-peu-de-recul&quot;&gt;Dimanche - 10h : un peu de recul&lt;/h2&gt;
&lt;p&gt;Retour au travail le dimanche vers 10h, toute l’équipe est là. Maxime n’a pas dormi (wahoo).
Il a terminé la page d’accueil du site &lt;a href=&quot;http://kalemeon.co/&quot;&gt;http://kalemeon.co/&lt;/a&gt;.
Et pour la partie application, le travail a bien avancé aussi, niveau visuel c’est presque bon. Il reste du travail coté back. Il a bien géré les jointures entre un utilisateur et ses contrats associés. C’est Joris qui part sur cette tâche.
De mon coté, je me charge d’une saisie de données réelles, c’est toujours plus sympa pour une démo. Sur ce point, un grand merci à Victor qui a épluché plusieurs types de contrats pour en extraire les infos pertinentes sous forme de clauses et de mots-clés associés. Je n’ai plus qu’à jouer avec un builder et voilà une BDD bien remplie.&lt;/p&gt;

&lt;p&gt;Pendant ce temps, l’autre moitié de l’équipe a travaillé sur la présentation finale et le rendu est vraiment bien.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dimanche---14h--pause-repas-et-lections&quot;&gt;Dimanche - 14h : pause repas et élections&lt;/h2&gt;
&lt;p&gt;À croire que Palo Altours fixe la date du Startup Weekend en se basant sur le calendrier électoral car, encore une fois, c’est un weekend d’élections. C’est donc après une petite pause citoyenne que nous reprenons le travail.
Le problème, c’est que côté dev il n’y a presque plus de travail. Le MVP semble bien fonctionner selon les cas d’utilisations sélectionnés pour la démo. 
Il reste donc surtout de la cosmétique à faire, c’est pas le plus fun.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dimanche---17h--prparation-de-la-dmo--la-fin-du-monde&quot;&gt;Dimanche - 17h : Préparation de la démo : la fin du monde&lt;/h2&gt;
&lt;p&gt;Encore un couac ! Une appletv est disponible mais le rendu sur iphone 5 n’est pas génial et impossible de trouver un ipad. Par chance on a mis la main sur un Slimport, mais là encore échec, le vidéoprojecteur n’est pas compatible : grrr.
Derniere tentative avec un Chromecast et là, c’est le wifi qui lâche toutes les 10 secondes :/
Finalement ce sera un PC avec un navigateur redimmensionné à la taille d’un téléphone, c’est mieux que rien…&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dimanche---21h--les-rsultats&quot;&gt;Dimanche - 21h : les résultats&lt;/h2&gt;
&lt;p&gt;L’annonce des résultats se fait dans une ambiance survoltée, et le classement est le suivant :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1er - &lt;code&gt;Peetch&lt;/code&gt; &lt;a href=&quot;https://twitter.com/PeetchApp&quot;&gt;https://twitter.com/PeetchApp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;2nd - &lt;code&gt;Sonson&lt;/code&gt; &lt;a href=&quot;https://twitter.com/sonsonapp&quot;&gt;https://twitter.com/sonsonapp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;3ème - &lt;code&gt;Qui apporte quoi ?&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Arghhh !! Quelle déception, aucun des 4 Troopers n’est sur le podium. C’est sûrement le signe que les Troopers sont fait pour travailler unis. On le saura pour la prochaine fois…&lt;/p&gt;

&lt;p&gt;Si vous souhaitez regarder ce qui a été réalisé (il n’est pas garanti que ca reste en ligne très longtemps) :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pour Kaléméon (la gestion des contrats d’assurance) : &lt;a href=&quot;http://app.kalemeon.co&quot;&gt;app.kalemeon.co&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Pour TIM (la prise de rendez-vous) : &lt;a href=&quot;https://timfront.herokuapp.com/#/&quot;&gt;https://timfront.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Pour Roadmad (la recherche de lieux insolites autour de soi) : &lt;em&gt;pas de lien&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rendez-vous avant la fin de l’année pour la prochaine édition, on sera encore là et toujours aussi motivés ! Il me semble qu’il y a les élections régionales à la fin de l’année, c’est sûr, bloquez ce weekend-là sur vos agendas :P&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;remerciements&quot;&gt;Remerciements&lt;/h2&gt;
&lt;p&gt;Merci le site MAME&lt;/p&gt;

&lt;p&gt;C’est la première fois que je pénétrais sur le site de l’ancienne imprimerie MAME et, bien que l’esplanade soit encore en travaux, l’intérieur est vraiment sympa et bien aménagé. 
Le site s’est parfaitement prêté à l’exercice avec un grand espace pour les discours, une zone où tous les cerveaux étaient réunis mais où il y avait assez de places pour que chaque groupe ait son espace. Il y avait même de quoi se détendre avec billards, tables de ping-pong et un panier de basket pour les plus sportifs.&lt;/p&gt;

&lt;p&gt;Merci l’orga &lt;/p&gt;

&lt;p&gt;Évidemment (et même si ça fait fayot :p), merci à Marie, Julien et Julien pour l’organisation ainsi que tous les bénévoles car ça fait une sacré logistique à mettre en place et tout s’est déroulé sans accrocs.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;photos&quot;&gt;Photos&lt;/h2&gt;
&lt;p&gt;Pour voir quelques photos du weekend vous pouvez allez jetter un oeil sur &lt;a href=&quot;https://twitter.com/search?q=%23SWTOURS&amp;amp;src=tyah&amp;amp;mode=photos&quot;&gt;twitter&lt;/a&gt; ou bien sur la galerie de la &lt;a href=&quot;http://www.smilybox.fr/albums/index.php?galerie=swtours&quot;&gt;smilybox&lt;/a&gt; qui était installée dans la zone détente.&lt;/p&gt;

&lt;div style=&quot;text-align:center;&quot;&gt;
    &lt;a href=&quot;/images/postSWTours2015/swtours_2015_0.jpg&quot; title=&quot;&quot; data-lightbox=&quot;group1&quot; class=&quot;inlineBoxes&quot;&gt;
      &lt;img class=&quot;mini&quot; src=&quot;/images/postSWTours2015/swtours_2015_0.jpg&quot; alt=&quot;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/images/postSWTours2015/swtours_2015_1.jpg&quot; title=&quot;&quot; data-lightbox=&quot;group1&quot; class=&quot;inlineBoxes&quot;&gt;
      &lt;img class=&quot;mini&quot; src=&quot;/images/postSWTours2015/swtours_2015_1.jpg&quot; alt=&quot;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/images/postSWTours2015/swtours_2015_4.jpg&quot; title=&quot;&quot; data-lightbox=&quot;group1&quot; class=&quot;inlineBoxes&quot;&gt;
      &lt;img class=&quot;mini&quot; src=&quot;/images/postSWTours2015/swtours_2015_4.jpg&quot; alt=&quot;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/images/postSWTours2015/swtours_2015_2.jpg&quot; title=&quot;&quot; data-lightbox=&quot;group1&quot; class=&quot;inlineBoxes&quot;&gt;
      &lt;img class=&quot;mini&quot; src=&quot;/images/postSWTours2015/swtours_2015_2.jpg&quot; alt=&quot;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/images/postSWTours2015/swtours_2015_6.jpg&quot; title=&quot;&quot; data-lightbox=&quot;group1&quot; class=&quot;inlineBoxes&quot;&gt;
      &lt;img class=&quot;mini&quot; src=&quot;/images/postSWTours2015/swtours_2015_6.jpg&quot; alt=&quot;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/images/postSWTours2015/swtours_2015_7.jpg&quot; title=&quot;&quot; data-lightbox=&quot;group1&quot; class=&quot;inlineBoxes&quot;&gt;
      &lt;img class=&quot;mini&quot; src=&quot;/images/postSWTours2015/swtours_2015_7.jpg&quot; alt=&quot;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/images/postSWTours2015/swtours_2015_3.jpg&quot; title=&quot;&quot; data-lightbox=&quot;group1&quot; class=&quot;inlineBoxes&quot;&gt;
      &lt;img class=&quot;mini&quot; src=&quot;/images/postSWTours2015/swtours_2015_3.jpg&quot; alt=&quot;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/images/postSWTours2015/swtours_2015_5.jpg&quot; title=&quot;&quot; data-lightbox=&quot;group1&quot; class=&quot;inlineBoxes&quot;&gt;
      &lt;img class=&quot;mini&quot; src=&quot;/images/postSWTours2015/swtours_2015_5.jpg&quot; alt=&quot;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;
</description>
                                <pubDate>Tue, 24 Mar 2015 00:00:00 +0100</pubDate>
                                <link>http://code-troopers.com/2015/03/24/StartupWeekend.html</link>
                                <guid isPermaLink="true">http://code-troopers.com/2015/03/24/StartupWeekend.html</guid>
                        </item>
                
                        <item>
                                <title>Suivre l'humeur de son équipe avec TeamMood</title>
                                <description>&lt;p&gt;Depuis bientôt 6 mois l’équipe des Code-Troopers utilise &lt;a href=&quot;https://www.teammood.com/&quot;&gt;TeamMood&lt;/a&gt; pour suivre son bonheur au quotidien. Retour sur l’utilisation d’un outil fort sympathique. &lt;/p&gt;

&lt;p&gt;Si l’on remonte quelques années en arrière, lorsque nous travaillions encore tous les 7 pour SRMvision, 
nous avions expérimenté un outil sur un grand tableau blanc pour connaître notre état d’esprit à la fin de chaque journée de travail. 
Nous l’appelions à l’époque &lt;code&gt;happiness chart&lt;/code&gt; (d’autres l’appellent aussi &lt;code&gt;niko-niko&lt;/code&gt;).
Toute l’équipe a rapidement adhéré au principe, car, dans la façon dont nous avions établi les règles, nous pouvions dessiner ce que l’on souhaitait dans notre case, seule la couleur importait : &lt;/p&gt;

&lt;!--break--&gt;

&lt;ul&gt;
  &lt;li&gt;Vert = Content ; &lt;/li&gt;
  &lt;li&gt;Bleu = Neutre ;&lt;/li&gt;
  &lt;li&gt;Rouge = Pas content.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On avait régulièrement droit à toutes sortes de dessins, du simple smiley au gribouillis le plus improbable. 
(Je suis assez déçu de n’avoir retrouvé aucune photo de ces grands moments d’art)&lt;/p&gt;

&lt;p&gt;Le problème que nous avions relevé alors était principalement l’assiduité de remplissage. 
En effet, même si pour partir le soir on passait dans la salle où se trouvait le tableau à remplir, on n’y pensait pas forcément (trop pressé de rentrer chez soi). 
Il n’était donc pas rare qu’il y ait des trous, comblés sans conviction le lendemain matin.&lt;/p&gt;

&lt;p&gt;C’est là où &lt;a href=&quot;https://www.teammood.com/&quot;&gt;TeamMood&lt;/a&gt; entre en action avec une grosse valeur ajoutée : l’envoi d’un mail quotidien ! 
Plus d’excuse pour oublier de voter, il suffit de cliquer sur le lien qui correspond à notre humeur du jour dans le mail reçu, 
c’est super simple et rapide, ça marche par téléphone, ça peut se faire dans le bus sur le trajet du retour.
Et si on se plante, parce qu’on a des gros doigts sur un petit écran, on peut revoter dans la foulée, ça permet d’écraser son propre vote du jour.&lt;/p&gt;

&lt;div style=&quot;text-align:center;margin-bottom:50px&quot;&gt;
    &lt;a href=&quot;/images/postTeammood/mailBig.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Mail du vote quotidien&quot; class=&quot;inlineBoxes&quot;&gt;
        &lt;img class=&quot;medium&quot; src=&quot;/images/postTeammood/mailBig.png&quot; alt=&quot;Mail du vote quotidien&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/images/postTeammood/mailPhone.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Mail du vote quotidien sur téléphone&quot; class=&quot;inlineBoxes&quot;&gt;
        &lt;img class=&quot;medium&quot; src=&quot;/images/postTeammood/mailPhone.png&quot; alt=&quot;Mail du vote quotidien sur téléphone&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Ensuite on retombe sur le fonctionnement souhaité : en fonction de son vote, on voit apparaître son &lt;em&gt;mood&lt;/em&gt;  avec une palette de couleurs et de smileys simples à comprendre en un coup d’œil.
Avec un peu d’historique on peut aussi apprécier via des stats simples l’évolution de l’humeur de l’équipe sur du plus long terme.&lt;/p&gt;

&lt;div style=&quot;text-align:center;margin-bottom:50px&quot;&gt;
    &lt;a href=&quot;/images/postTeammood/quotidien.png&quot; data-lightbox=&quot;group-2&quot; title=&quot;&quot; class=&quot;inlineBoxes&quot;&gt;
        &lt;img class=&quot;medium&quot; src=&quot;/images/postTeammood/quotidien.png&quot; alt=&quot;&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/images/postTeammood/stat.png&quot; data-lightbox=&quot;group-2&quot; title=&quot;&quot; class=&quot;inlineBoxes&quot;&gt;
        &lt;img class=&quot;medium&quot; src=&quot;/images/postTeammood/stat.png&quot; alt=&quot;&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Finalement il ne reste plus qu’à exploiter ces données. Et là, libre à chacun (et à chaque équipe) de l’interpréter comme il le souhaite. 
De notre côté nous avons expérimenté plusieurs façons de faire : 
une revue en rétro de fin de sprint, une alerte au daily le lendemain d’un jour…
Cela demande plus ou moins de temps afin de trouver une méthode efficace pour tirer bénéfice de ces informations.
En général, plus on attend plus le souvenir s’estompe et donc le problème est amoindri, ce qui, à mon avis, n’est pas une bonne chose.
Mais là c’est vraiment chacun ses goûts.&lt;/p&gt;

&lt;p&gt;Que dire de plus ?
&lt;a href=&quot;https://www.teammood.com/&quot;&gt;TeamMood&lt;/a&gt; est un produit français (un de plus) développé à Toulouse par &lt;a href=&quot;https://twitter.com/ndeverge&quot;&gt;Nicolas Deverge&lt;/a&gt;.
C’est encore en bêta, mais ça fonctionne parfaitement (aucun problème à signaler depuis qu’on l’utilise).
Je sais que la roadmap est bien remplie, mais la prochaine fonctionnalité qu’on attend c’est la gestion des congés/absences, histoire de ne pas être dérangé pendant les vacances.&lt;/p&gt;

&lt;p&gt;Conclusion : 
je le recommande à toutes les équipes qui sont prêtes à se prendre en main pour faire bouger les choses afin d’être heureuses au quotidien.&lt;/p&gt;
</description>
                                <pubDate>Wed, 11 Feb 2015 00:00:00 +0100</pubDate>
                                <link>http://code-troopers.com/2015/02/11/Teammood.html</link>
                                <guid isPermaLink="true">http://code-troopers.com/2015/02/11/Teammood.html</guid>
                        </item>
                
                        <item>
                                <title>ct - alias de projets</title>
                                <description>&lt;p&gt;Dans l’équipe Code-Troopers, nous manipulons des technos qui sont assez différentes et qui possèdent chacune un vocabulaire différent qui leur permet de fonctionner en ligne de commande.
Du coup, un de nos problèmes récurrents est de se rappeler quelle commande dois-je lancer lorsque je veux travailler sur tel projet (&lt;code&gt;mvn jetty:run&lt;/code&gt;, &lt;code&gt;gradle assemble&lt;/code&gt;, &lt;code&gt;grunt serve&lt;/code&gt;…).&lt;/p&gt;

&lt;p&gt;Un autre aspect pénible à avoir plein de façons différentes de fonctionner est qu’il est quasiment impossible d’avoir des alias pertinents dans son shell préféré.&lt;/p&gt;

&lt;p&gt;Fort de ce constat, nous avons entrepris d’écrire notre petit outil qui nous permet de moins réflechir quand on change de projet. Puisqu’on est pas super imaginatif et qu’on n’avait pas encore de petit outil à notre nom, nous l’avons nommé “ct”.
&lt;!--break--&gt;&lt;/p&gt;

&lt;h2 id=&quot;quest-ce-que-cest-&quot;&gt;Qu’est ce que c’est ?&lt;/h2&gt;
&lt;p&gt;Imaginez que pour chaque projet vous n’ayiez qu’à remplir un fichier (à la façon de votre &lt;code&gt;.gitignore&lt;/code&gt;) pour définir les différentes tâches disponibles. Une fois ceci fait, les autres développeurs n’ont plus à se soucier des tâches à lancer, ils peuvent se contenter d’utiliser le vocabulaire commun, de se placer dans le répertoire du projet et de lancer la commande &lt;code&gt;ct run&lt;/code&gt; au lieu de &lt;code&gt;mvn jetty:run&lt;/code&gt; (et s’ils veulent connaître la liste des tâches disponibles ils le peuvent via un &lt;code&gt;ct help&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Encore mieux, puisque les commandes sont normalisées, vous pouvez directement exporter vos alias qui accélèrent encore l’utilisation (&lt;code&gt;run&lt;/code&gt; pour &lt;code&gt;ct run&lt;/code&gt;), et bingo, c’est transverse pour tous vos projets.&lt;/p&gt;

&lt;h2 id=&quot;comment-a-marche-&quot;&gt;Comment ça marche ?&lt;/h2&gt;
&lt;p&gt;Le tout est un bête script shell qui utilise quelques commandes de base et quelques outils indispensables à tout développeur.&lt;/p&gt;

&lt;p&gt;Quelques spécificités sont à remarquer en fonction de votre OS :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sous Mac, il est important d’installer gnu-sed en lieu et place de celui d’origine&lt;/li&gt;
  &lt;li&gt;sous Windows, il vous faut un shell unix (&lt;a href=&quot;/2014/10/01/babun.html&quot;&gt;Babun&lt;/a&gt; est conseillé).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;comment-lutiliser-&quot;&gt;Comment l’utiliser ?&lt;/h2&gt;
&lt;p&gt;Tout se fait en très peu d’étapes :&lt;/p&gt;

&lt;h3 id=&quot;installation-de-loutil&quot;&gt;Installation de l’outil:&lt;/h3&gt;

&lt;p&gt;Référez-vous au &lt;a href=&quot;https://github.com/code-troopers/ct/blob/master/README.md&quot;&gt;README&lt;/a&gt; présent sur le dépôt &lt;a href=&quot;https://github.com/code-troopers/ct/&quot;&gt;Github&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Pour résumer il est juste nécessaire de placer une copie du script dans votre &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CT_TARGET=~/bin;mkdir $CT_TARGET; wget -O $CT_TARGET/ct https://raw.githubusercontent.com/code-troopers/ct/master/ct &amp;amp;&amp;amp; chmod +x $CT_TARGET/ct
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;intgration-dans-un-projet&quot;&gt;Intégration dans un projet&lt;/h3&gt;
&lt;p&gt;Créez à la racine un fichier nommé &lt;code&gt;.ctproject&lt;/code&gt; qui va contenir vos alias&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;run=’mvn jetty:run’
debug=’mvn jetty:dbg’
test=’mvn test’
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;L’idéal étant de le faire au démarrage du projet, plus de questions à se poser ultérieurement&lt;/p&gt;

&lt;h3 id=&quot;utilisation-dans-un-projet&quot;&gt;Utilisation dans un projet&lt;/h3&gt;

&lt;p&gt;Il suffit de lancer la commande qui correspond à un alias (par exemple ici : &lt;code&gt;ct run&lt;/code&gt;, &lt;code&gt;ct debug&lt;/code&gt; ou &lt;code&gt;ct test&lt;/code&gt;, ou d’exécuter &lt;code&gt;ct help&lt;/code&gt; pour avoir la liste des alias disponibles).&lt;/p&gt;

&lt;h3 id=&quot;tuning-sur-plusieurs-projets&quot;&gt;Tuning sur plusieurs projets&lt;/h3&gt;

&lt;p&gt;En définissant votre nomenclature d’alias par projet, vous pourrez vous permettre d’exporter des alias globaux sur vos machines pour appeler &lt;code&gt;ct&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;bonus--lister-les-ports-ouverts&quot;&gt;Bonus : lister les ports ouverts&lt;/h2&gt;
&lt;p&gt;Puisque nous jonglons souvent entre projets, un autres soucis que nous avons est que nous oublions les ports ouverts pour chacun des projets. En plus, nous avons souvent plusieurs projets de démarrés sans même nous rappeler qu’ils le sont (surtout avec les projets légers REST/AngularJS).&lt;/p&gt;

&lt;p&gt;Nous avons donc rajouté la commande &lt;code&gt;ct ports&lt;/code&gt; qui démarre un micro serveur http et permet de récupérer la liste des ports qui attendent des connexions sur nos machines, ainsi que le dossier de travail associé (ce qui est souvent suffisant pour savoir de quel projet il s’agit).&lt;/p&gt;

&lt;div style=&quot;text-align:center;&quot;&gt;
    &lt;a href=&quot;/images/postCT/listen.png&quot; title=&quot;Exemple de listing des ports&quot; data-lightbox=&quot;group1&quot;&gt;
    &lt;img class=&quot;medium&quot; src=&quot;/images/postCT/listen.png&quot; alt=&quot;Exemple de listing des ports&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Pour pouvoir utiliser cette commande, il faut que les quelques outils suivants soient installés : &lt;em&gt;netcat&lt;/em&gt;, &lt;em&gt;awk&lt;/em&gt;, &lt;em&gt;wget&lt;/em&gt; et &lt;em&gt;lsof&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;exemple-dutilisation&quot;&gt;Exemple d’utilisation&lt;/h3&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
&lt;video width=&quot;90%&quot; controls=&quot;&quot; src=&quot;/videos/screencast_ct.webm&quot;&gt;
&lt;object type=&quot;application/x-shockwave-flash&quot; width=&quot;400&quot; height=&quot;222&quot; data=&quot;http://www.youtube.com/v/HVMoJqg41Bw&quot;&gt;
  &lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/jkWjmGdraR8&quot; /&gt;
  &lt;param name=&quot;wmode&quot; value=&quot;transparent&quot; /&gt;
Screencast d'une utilisation quotidienne de ct. Vous n'avez pas de navigateur moderne, ni Flash installé...
 &lt;/object&gt;&lt;/video&gt;
&lt;/div&gt;
</description>
                                <pubDate>Mon, 15 Dec 2014 00:00:00 +0100</pubDate>
                                <link>http://code-troopers.com/2014/12/15/CT_Project_Alias.html</link>
                                <guid isPermaLink="true">http://code-troopers.com/2014/12/15/CT_Project_Alias.html</guid>
                        </item>
                
        </channel>
</rss>