<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
                <title>Code-Troopers blog</title>
                <description>Le blog de l&#39;équipe Code-Troopers</description>                
                <link>http://code-troopers.com</link>
                <atom:link href="http://code-troopers.com/feed.xml" rel="self" type="application/rss+xml"/>
                
                        <item>
                                <title>Startup Weekend : côté perdant</title>
                                <description>&lt;h2 id=&quot;ou--yo--angularjs-le-meilleur-ami-des-mvp&quot;&gt;Ou : Yo ! AngularJS, le meilleur ami des MVP&lt;/h2&gt;
&lt;p&gt;Le week-end du 5 décembre a eu lieu un Startup Weekend édition tourisme à Tours où 6 troopers étaient présents. 3 d’entres nous ont choisi l’équipe &lt;code class=&quot;highlighter-rouge&quot;&gt;We Guide&lt;/code&gt; composée de 3 développeurs, 3 designers et 3 profils business (les 3 autres ont choisi &lt;a href=&quot;https://twitter.com/shakemytours&quot;&gt;@shakemytours&lt;/a&gt; et ont gagné le Startup Weekend).
L’idée de base est de découvrir une région à l’aide d’un guide local, officiel ou non. Quelqu’un qui emmène les touristes aussi bien dans les bars, restaurants, parcs que dans les monuments plus habituels de touraine comme les châteaux, la &lt;a href=&quot;http://basiliquesaintmartin.fr/&quot;&gt;basilique Saint-Martin&lt;/a&gt; ou le &lt;a href=&quot;http://www.decouvrez-levaldeloire.com/#grand-aquarium-actualites&quot;&gt;Grand Aquarium de Touraine&lt;/a&gt;. Un peu à l’image des &lt;a href=&quot;http://www.tours-greeters.fr/&quot;&gt;greeters&lt;/a&gt; mais rémunérés pour motiver plus de guides et permettre de promouvoir cette pratique.&lt;/p&gt;

&lt;div class=&quot;text-center&quot;&gt;
    &lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/e/eb/Tours,_Saint_Martin.JPG/280px-Tours,_Saint_Martin.JPG&quot; data-lightbox=&quot;group-1&quot; title=&quot;saint martin de tours&quot; class=&quot;inlineBoxes&quot;&gt;
        &lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/e/eb/Tours,_Saint_Martin.JPG/280px-Tours,_Saint_Martin.JPG&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;!--break--&gt;

&lt;h2 id=&quot;init--lattaque-des-clones&quot;&gt;Init : L’attaque des clones&lt;/h2&gt;
&lt;p&gt;Fort de nos précédentes expériences de Startup Weekend, nous avions tout prévu. En hard, batteries pleines et câbles. En soft, des images docker diverses de jdk8 à postgresql en passant par jenkins (oui c’était large et optimiste) mais aussi IntelliJ et Android Studio à jour, ainsi que diverses images de genymotion. 
Nous étions parés à toute éventualité, ou presque. Pour développer le MVP de We Guide, nous avons décidé de faire un site web. 
Faire un site complet en 54h, qui soit à peu près beau, c’est un peu mission impossible. On partait de absolument 0 à part une esquisse d’idée de base, donc le vendredi soir on l’a surtout passé à discuter de l’idée.&lt;/p&gt;

&lt;p&gt;Nous avons donc choisi de nous concentrer uniquement sur un front AngularJS en mockant les appels du back. Bon, dans la liste des choses préparées à l’avance on n’avait pas pensé à faire un “yo angular”.
&lt;a href=&quot;http://yeoman.io/&quot;&gt;Yeoman&lt;/a&gt; est un générateur de projet, ça permet d’initialiser un nouveau projet avec un certains nombre de bibliothèques, les connexions aux bases de données nécéssaires, la gestion des utilisateurs etc. Dans notre cas nous avions surtout besoin de npm/bower/gulp. 
Le téléchargement est un peu long, le répertoire &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; fait 380Mo, alors oui en fibre chez soit c’est rapide, mais quand on est des dizaines à tirer sur un réseau pas forcément dessiné pour, c’est un peu lent. En plus on a eu un bug dans gulp que l’on a remplacé par grunt faute de temps pour débugger, donc re-téléchargement.
Au final, on a pu commencer à tous faire nos git clone vers 10h le samedi matin.&lt;/p&gt;

&lt;p&gt;Ensuite nous commençons à intégrer ce que l’on aura besoin. Du beau et des petits effets, donc &lt;a href=&quot;https://material.angularjs.org/latest/&quot;&gt;Angular Material&lt;/a&gt;. On prépare nos composants, autocomplete, sliders, buttons… et les routes, page principale, page de création/édition de compte, recherche de guides. Les informations sur les couleurs, les pictos, logo et maquettes arrivent au fil de l’eau. C’est toujours un peu spécial de commencer à travailler et d’avoir toutes les informations &lt;em&gt;après&lt;/em&gt; mais on commence à être des habitués des Startup Weekend (et de certains clients ;) )&lt;/p&gt;

&lt;h2 id=&quot;commit--le-rveil-de-la-force&quot;&gt;Commit : Le réveil de la force&lt;/h2&gt;
&lt;p&gt;Le samedi soir, on est dans la vibe. Plus trop besoin de réseau, on a des visuels et nos bibliothèques de base. Pas besoin de s’occuper des ravitaillements, on se concentre juste sur le code et c’est ça qu’on aime.
Nous avons donc une navbar avec notre logo et les différentes actions de navigation fonctionnelles.&lt;/p&gt;
&lt;div style=&quot;text-align:center;margin-bottom:50px&quot;&gt;
    &lt;a href=&quot;/images/postWeGuide/navbar1.png&quot; data-lightbox=&quot;group-2&quot; title=&quot;navbar weguide&quot; class=&quot;inlineBoxes&quot;&gt;
&lt;img class=&quot;medium&quot; src=&quot;/images/postWeGuide/navbar1.png&quot; alt=&quot;navbar&quot; /&gt;&lt;br /&gt;
    &lt;/a&gt;
&lt;br /&gt;
    &lt;a href=&quot;/images/postWeGuide/navbar2.png&quot; data-lightbox=&quot;group-2&quot; title=&quot;navbar connected weguide&quot; class=&quot;inlineBoxes&quot;&gt;
&lt;img class=&quot;medium&quot; src=&quot;/images/postWeGuide/navbar2.png&quot; alt=&quot;navbar connecté&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Un logo, une phrase d’accroche sur un fond de page avec transition d’images en background animé par css (ici en accéléré dans le gif).&lt;/p&gt;
&lt;div style=&quot;text-align:center;margin-bottom:50px&quot;&gt;
    &lt;a href=&quot;/images/postWeGuide/logo.gif&quot; data-lightbox=&quot;group-3&quot; title=&quot;Logo weguide&quot; class=&quot;inlineBoxes&quot;&gt;
&lt;img class=&quot;medium&quot; src=&quot;/images/postWeGuide/logo.gif&quot; alt=&quot;logo&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Un footer avec nos liens twitter et facebook, et le premier formulaire de recherche.
On recherche donc une ville, un autocomplete angular material, avec des dates de début et de fin de projet. Si vous connaissez AngularJS, vous savez peut-être qu’il n’y avait pas de date picker jusqu’à peu. Maintenant il y en a mais en RC et c’est encore un peu buggué, il a fallu corriger certaines choses liées au style.
Ah oui, sur le bouton de recherche, en plus du ripple effect il y a un petit effet kiss cool tout en css et évidemment, la ville est mandatory (tout est dans le détail).&lt;/p&gt;
&lt;div style=&quot;text-align: center;margin:50px;&quot;&gt;
&lt;video style=&quot;width: 90%; max-width: 600px;&quot; controls=&quot;&quot; src=&quot;/images/postWeGuide/search.webm&quot;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;p&gt;On arrive alors sur la page de résultats. Sur cette page au design épuré, nous avons la barre de recherche avec la ville et les dates saisies précédemment.&lt;/p&gt;
&lt;div style=&quot;text-align:center;margin-bottom:50px&quot;&gt;
    &lt;a href=&quot;/images/postWeGuide/searchbar.png&quot; data-lightbox=&quot;group-4&quot; title=&quot;Searchbar weguide&quot; class=&quot;inlineBoxes&quot;&gt;
&lt;img class=&quot;medium&quot; src=&quot;/images/postWeGuide/searchbar.png&quot; alt=&quot;searchbar&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;S’en suit des paramètres par défaut. Des checkbox pour les activités, des doubles sliders pour sélectionner la distance et le prix souhaité.&lt;/p&gt;
&lt;div style=&quot;text-align:center;margin-bottom:50px&quot;&gt;
    &lt;a href=&quot;/images/postWeGuide/params.gif&quot; data-lightbox=&quot;group-5&quot; title=&quot;search parameters weguide&quot; class=&quot;inlineBoxes&quot;&gt;
&lt;img class=&quot;medium&quot; src=&quot;/images/postWeGuide/params.gif&quot; alt=&quot;params&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Au centre, une description du guide, “effet zoom pour plus d’infos” et la possibilité de lui envoyer un message.&lt;/p&gt;
&lt;div style=&quot;text-align: center;margin:50px;&quot;&gt;
&lt;video style=&quot;width: 90%; max-width: 600px;&quot; controls=&quot;&quot; src=&quot;/images/postWeGuide/guide.webm&quot;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;p&gt;Enfin, une autre page fonctionnelle a été réalisée pour s’inscrire en tant que guide.
Tout est enregistré dans le local storage avec AngularJS, ça permet d’aller vite, de pouvoir jouer avec l’appli mais de ne pas avoir besoin d’une base de donnée.&lt;/p&gt;
&lt;div style=&quot;text-align: center;margin:50px;&quot;&gt;
&lt;video style=&quot;width: 90%; max-width: 600px;&quot; controls=&quot;&quot; src=&quot;/images/postWeGuide/register.webm&quot;&gt;&lt;/video&gt;
&lt;/div&gt;

&lt;p&gt;Pour en voir plus, vous pouvez aller sur &lt;a href=&quot;https://weguide.herokuapp.com&quot;&gt;https://weguide.herokuapp.com&lt;/a&gt;  et le code est disponible sur &lt;a href=&quot;https://github.com/code-troopers/sw-weguide/&quot;&gt;https://github.com/code-troopers/sw-weguide/&lt;/a&gt; mais ne vous attardez pas trop sur les commits logs :p&lt;/p&gt;

&lt;h2 id=&quot;push--un-nouvel-espoir&quot;&gt;Push : Un nouvel espoir&lt;/h2&gt;
&lt;p&gt;Pour finir même si nous n’avons pas gagné de prix, on a gagné des amis, on s’est amusé, on a codé tout le week-end sans s’occuper de logistique et c’était bien sympa.
Encore une fois merci aux organisateurs d’avoir tout prévu et d’avoir pris soin de notre santé physique et mentale.&lt;/p&gt;

&lt;p&gt;Nos collègues étaient principalement des étudiants qui n’avaient jamais travaillés avec des développeurs. Inconsciemment nous avons utilisé quelques principes de base des méthodes agiles, entre autre en faisant un point toutes les 2/3 heures, équivalent à un daily. Et nous avons essayé de faire passer l’idée des post-its pour les bugfix et les nouvelles tâches. Mais nous aurions pu mieux faire, en partie parce-que l’on travaille totalement différement en Startup Weekend comparé à la vraie vie, donc on aurait pu mettre l’accent sur d’autres points afin de les former à être de bons clients, ça pourrait être utile pour plus tard :)&lt;/p&gt;

&lt;p&gt;Cet article avait deux buts, déjà soulager ma conscience car sans doute personne n’a vu notre travail même si cette année un prix a été remis pour le MVP le plus abouti, c’est déjà plus valorisant pour les développeurs.
Ensuite pour le rappeler, AngularJS c’est juste trop bien, ce n’est pas un mockup, cela marche vraiment en un rien de temps. J’espère vous avoir convaincu si vous en doutiez encore.&lt;/p&gt;

</description>
                                <pubDate>Thu, 14 Jan 2016 00:00:00 +0000</pubDate>
                                <link>http://code-troopers.com/2016/01/14/StartupWeekend-CotePerdant.html</link>
                                <guid isPermaLink="true">http://code-troopers.com/2016/01/14/StartupWeekend-CotePerdant.html</guid>
                        </item>
                
                        <item>
                                <title>Navig&#39;Tours : côté serveur</title>
                                <description>&lt;p&gt;Cet article, une fois n’est pas coutume, va rentrer un peu plus dans le fonctionnement de la partie serveur mise en place pour &lt;a href=&quot;http://navigtours.com/&quot;&gt;Navig’Tours&lt;/a&gt;.
Si vous n’êtes pas technique, il risque d’être compliqué de le suivre !&lt;/p&gt;

&lt;!-- break --&gt;

&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;
&lt;p&gt;La partie serveur de Navig’Tours est en réalité assez simple. Comme dit lors de différentes présentations des membres de Code-Troopers, ce projet est pour nous un moyen de nous amuser lorsque nous nous retrouvons tous les septs.
C’est également le projet que nous utilisons pour tester certaines technologies et approches.&lt;/p&gt;

&lt;p&gt;Ainsi, Navig’Tours est une application développée en utilisant Java 8, mais rien de forcément très étonnant maintenant. Le côté le plus intéressant est qu’elle est en production depuis plus d’un an maintenant avec Java 8 !&lt;/p&gt;

&lt;p&gt;Ensuite, nous utilisons l’excellent framework RestX pour simplifier notre vie dans la gestion des appels REST, ce qu’il nous apporte, entre autres :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;de l’injection de dépendances lors de la compilation&lt;/li&gt;
  &lt;li&gt;un outillage d’administration complet&lt;/li&gt;
  &lt;li&gt;une plateforme de test intégrée et de specs nous permettant de documenter facilement l’API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enfin, pour la partie stockage des données, nous utilisons MongoDB qui nous simplifie la gestion de données en manipulant des données principalement au format JSON (et fournit une bonne gestion de la géolocalisation par coordonnées).&lt;/p&gt;

&lt;h2 id=&quot;du-dev&quot;&gt;Du dev…&lt;/h2&gt;
&lt;p&gt;Côté dev, nous utilisons notre petit wrapper (&lt;a href=&quot;http://code-troopers.com/2014/12/15/CT_Project_Alias.html&quot;&gt;ct&lt;/a&gt;) pour les tâches classiques qui se charge d’effectuer le build ainsi que le run de l’application avec ses dépendances.
Le lancement de l’application se limite à mettre à disposition un serveur MongoDB ainsi qu’à effectuer un &lt;code class=&quot;highlighter-rouge&quot;&gt;java -jar&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;la-prod-&quot;&gt;À la prod !&lt;/h2&gt;
&lt;p&gt;Historiquement, l’application a été déployée sur Heroku dans son plan gratuit en utilisant plusieurs services cibles (pour répartir la charge via l’utilisation de plusieurs entrées DNS).&lt;/p&gt;

&lt;p&gt;Mais, suite au changement de tarification d’Heroku et notre envie d’utiliser Docker sur un vrai projet, nous avons migré l’environnement pour utiliser exclusivement Docker.&lt;/p&gt;

&lt;p&gt;Un des intérêts de la transformation que nous avons opéré est que nous sommes également capable de lancer l’application très simplement à l’aide de descripteurs Docker ainsi que du docker-compose qui décrit les interactions entre nos services.&lt;/p&gt;

&lt;h2 id=&quot;process-de-livraison&quot;&gt;Process de livraison&lt;/h2&gt;
&lt;p&gt;Pour effectuer la livraison de l’application, nous sommes passés d’un &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; vers heroku à un process impliquant Jenkins dans 3 étapes successives (mais qui s’enchaînent automatiquement) :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;construction de l’application et archivage dans un &lt;code class=&quot;highlighter-rouge&quot;&gt;tgz&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;copie du tgz produit pour la construction d’une image Docker poussée vers notre dépôt interne&lt;/li&gt;
  &lt;li&gt;lancement de l’application via un &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose run -d&lt;/code&gt; sur les machines cibles&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;gestion-du-multi-environnement&quot;&gt;Gestion du multi-environnement&lt;/h2&gt;
&lt;p&gt;Comme toutes les applications d’entreprise, nous déployons vers plusieurs environnement afin de valider la bonne tenue de l’application et la qualité de nos développements :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;dev / local : poste du développeur&lt;/li&gt;
  &lt;li&gt;preprod : version à passer en production&lt;/li&gt;
  &lt;li&gt;prod : version actuelle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;À ceci, nous pouvons ajouter plusieurs versions en parallèle pour différentes fonctionnalités et/ou villes (l’info exclusive est cachée ici, Navig’VotreVille arrive…). 
Pour être capable de gérer des déploiements différents nous avons ajouté quelques paramètres à nos scripts de lancement de docker-compose nous permettant de disposer de noms différents par projet pous éviter les problèmes.&lt;/p&gt;
</description>
                                <pubDate>Mon, 04 Jan 2016 00:00:00 +0000</pubDate>
                                <link>http://code-troopers.com/2016/01/04/NavigTours-cote_serveur.html</link>
                                <guid isPermaLink="true">http://code-troopers.com/2016/01/04/NavigTours-cote_serveur.html</guid>
                        </item>
                
                        <item>
                                <title>Android : Publier son apk en ligne de commande</title>
                                <description>&lt;p&gt;Lorsque l’on fait du développement Android, on a régulièrement besoin de publier des nouvelles versions de l’application sur le Play Store. 
Il est assez fastidieux de devoir se connecter à l’interface de Google, de sélectionner le projet et ensuite d’uploader son nouvel apk.&lt;/p&gt;

&lt;p&gt;Heureusement pour nous, Google a prévu le coup avec une API que l’on peut attaquer en ligne de commande.
Et, encore plus sympa, &lt;a href=&quot;https://plus.google.com/+Bj%C3%B6rnHurling/posts&quot;&gt;Björn Hurling&lt;/a&gt; a publié sur github 
&lt;a href=&quot;https://github.com/Triple-T/gradle-play-publisher&quot;&gt;un plugin gradle qui utilise cette API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Voyons ensemble pas à pas comment et quoi configurer afin de livrer ses apk en ligne de commande en utilisant gradle.&lt;/p&gt;

&lt;!--break--&gt;

&lt;h2 id=&quot;prrequis&quot;&gt;Prérequis&lt;/h2&gt;

&lt;p&gt;Pour commencer, il faut avoir un build qui fonctionne avec gradle.&lt;/p&gt;

&lt;p&gt;Normalement pas de problème si c’est un projet récent puisque c’est ce qu’Android Studio propose maintenant par défaut.
Si ce n’est pas le cas, vous pouvez vous reposer sur la &lt;a href=&quot;http://tools.android.com/tech-docs/new-build-system/intellij_to_gradle&quot;&gt;doc de Google&lt;/a&gt; à ce sujet.&lt;/p&gt;

&lt;h2 id=&quot;tape-1--cration-du-service-account&quot;&gt;Étape 1 : Création du ‘Service Account’&lt;/h2&gt;

&lt;p&gt;La première étape consiste à créer un compte qui peut utilser l’API de Google : contrairement à un compte utilisateur classique, celui-ci utilisera un ficher de clé pour s’identifier plutôt qu’un mot de passe.&lt;/p&gt;

&lt;p&gt;Pour cela, rendez-vous dans un premier temps dans l’interface développeur du Play Store, dans la section &lt;code class=&quot;highlighter-rouge&quot;&gt;Settings &amp;gt; API acces&lt;/code&gt; et cliquez sur &lt;code class=&quot;highlighter-rouge&quot;&gt;Create Service Account&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align:center;margin:50px&quot;&gt;
  &lt;a href=&quot;/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen1.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Configuration de l&#39;Accout service - 1&quot; class=&quot;inlineBoxes&quot;&gt;
    &lt;img class=&quot;medium&quot; src=&quot;/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen1.png&quot; alt=&quot;Configuration de l&#39;Accout service - 1&quot; /&gt;
  &lt;/a&gt;
  &lt;a href=&quot;/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen2.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Configuration de l&#39;Accout service - 2&quot; class=&quot;inlineBoxes&quot;&gt;
    &lt;img class=&quot;medium&quot; src=&quot;/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen2.png&quot; alt=&quot;Configuration de l&#39;Accout service - 2&quot; /&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;En suivant le lien du petit &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; vous allez être redirigé vers la console Google développeur d’où vous pourrez créer un nouveau &lt;code class=&quot;highlighter-rouge&quot;&gt;Credential&lt;/code&gt;  de type &lt;code class=&quot;highlighter-rouge&quot;&gt;Service account&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Sélectionnez le format de clé &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt; qui est recommandé, le téléchargement de celle-ci devrait alors se faire automatiquement.&lt;/p&gt;

&lt;p&gt;On peut ensuite voir qu’un nouveau &lt;code class=&quot;highlighter-rouge&quot;&gt;Service account&lt;/code&gt; est apparu dans la liste des Credentials.&lt;/p&gt;

&lt;div style=&quot;text-align:center;margin:50px&quot;&gt;
  &lt;a href=&quot;/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen3.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Configuration de l&#39;Accout service - 3&quot; class=&quot;inlineBoxes&quot;&gt;
    &lt;img class=&quot;medium&quot; src=&quot;/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen3.png&quot; alt=&quot;Configuration de l&#39;Accout service - 3&quot; /&gt;
  &lt;/a&gt;
  &lt;a href=&quot;/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen4.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Configuration de l&#39;Accout service - 4&quot; class=&quot;inlineBoxes&quot;&gt;
    &lt;img class=&quot;medium&quot; src=&quot;/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen4.png&quot; alt=&quot;Configuration de l&#39;Accout service - 4&quot; /&gt;
  &lt;/a&gt; 
  &lt;a href=&quot;/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen5.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Configuration de l&#39;Accout service - 5&quot; class=&quot;inlineBoxes&quot;&gt;
    &lt;img class=&quot;medium&quot; src=&quot;/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen5.png&quot; alt=&quot;Configuration de l&#39;Accout service - 5&quot; /&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;De retour sur l’interface d’admin du Play Store, on constate que le &lt;code class=&quot;highlighter-rouge&quot;&gt;Service Account&lt;/code&gt; est bien créé et disponible ici.&lt;/p&gt;

&lt;div style=&quot;text-align:center;margin:50px&quot;&gt;
  &lt;a href=&quot;/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen6.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Configuration de l&#39;Accout service - 6&quot; class=&quot;inlineBoxes&quot;&gt;
    &lt;img class=&quot;medium&quot; src=&quot;/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen6.png&quot; alt=&quot;Configuration de l&#39;Accout service - 6&quot; /&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&quot;tape-2--attribution-des-droits&quot;&gt;Étape 2 : Attribution des droits&lt;/h2&gt;
&lt;p&gt;Il faut maintenant donner les droits au compte que l’on vient de créer afin qu’il puisse au moins livrer les apk en alpha.&lt;/p&gt;

&lt;p&gt;Pour cela cliquez sur le bouton &lt;code class=&quot;highlighter-rouge&quot;&gt;Grant access&lt;/code&gt;. Dans la popup qui s’ouvre, les droits minimums à accorder pour que le plugin puisse fonctionnner sont :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Edit store listing, pricing &amp;amp; distribution&lt;/li&gt;
  &lt;li&gt;Manage Production APKs&lt;/li&gt;
  &lt;li&gt;Manage Alpha &amp;amp; Beta APKs&lt;/li&gt;
  &lt;li&gt;Manage Alpha &amp;amp; Beta users&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ces choix pourront être modifés ultérieurement dans l’écran récapitulatif (mais ce n’est pas recommandé).&lt;/p&gt;

&lt;div style=&quot;text-align:center;margin:50px&quot;&gt;
  &lt;a href=&quot;/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen7.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Configuration de l&#39;Accout service - 7&quot; class=&quot;inlineBoxes&quot;&gt;
    &lt;img class=&quot;medium&quot; src=&quot;/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen7.png&quot; alt=&quot;Configuration de l&#39;Accout service - 7&quot; /&gt;
  &lt;/a&gt;
  &lt;a href=&quot;/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen8.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Configuration de l&#39;Accout service - 8&quot; class=&quot;inlineBoxes&quot;&gt;
    &lt;img class=&quot;medium&quot; src=&quot;/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_ConfigureAccount_Screen8.png&quot; alt=&quot;Configuration de l&#39;Accout service - 8&quot; /&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&quot;tape-3--le-plugin-gradle&quot;&gt;Étape 3 : le plugin gradle&lt;/h2&gt;
&lt;p&gt;Il faut maintenant configurer son build pour ajouter les informations relatives au plugin qui effectuera la livraison vers le Play Store.&lt;/p&gt;

&lt;p&gt;Dans le fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; du projet il faut donc rajouter la dépendance au plugin :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;buildscript {

    repositories {
        mavenCentral()
    }

    dependencies {
        // ...
        classpath &#39;com.github.triplet.gradle:play-publisher:1.1.4&#39;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Et dans le &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; de l’application (du Module), il faut appliquer le plugin au même niveau que le plugin Android :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apply plugin: &#39;com.android.application&#39;
apply plugin: &#39;com.github.triplet.play&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ensuite, toujours dans le &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;, il est nécessaire d’ajouter les informations de l’&lt;code class=&quot;highlighter-rouge&quot;&gt;Account service&lt;/code&gt; précédemment créé pour qu’il puisse se connecter et faire la livraison 
(c’est là que l’on va utiliser la clé &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt; générée).&lt;/p&gt;

&lt;p&gt;Placez donc la clé dans votre projet et faites-y référence dans la configuration du plugin :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;play {
    jsonFile = file(&#39;../publishKey/serviceAccountKeys.json&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;À partir de là, notre build est configuré. On peut notamment s’en rendre compte en faisant un &lt;code class=&quot;highlighter-rouge&quot;&gt;./gradlew tasks&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;On y voit toutes les tâches gradle qu’on peut appeler :&lt;/p&gt;

&lt;div style=&quot;text-align:center;margin:50px&quot;&gt;
  &lt;a href=&quot;/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_Gradlew_tasks_config_before.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Liste des tasks gradle disponibles sans le plugin&quot; class=&quot;inlineBoxes&quot;&gt;
    &lt;img class=&quot;medium&quot; src=&quot;/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_Gradlew_tasks_config_before.png&quot; alt=&quot;Liste des tasks gradle disponibles sans le plugin&quot; /&gt;
  &lt;/a&gt;
  &lt;a href=&quot;/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_Gradlew_tasks_config_after.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Liste des tasks gradle disponibles avec le plugin&quot; class=&quot;inlineBoxes&quot;&gt;
    &lt;img class=&quot;medium&quot; src=&quot;/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_Gradlew_tasks_config_after.png&quot; alt=&quot;Liste des tasks gradle disponibles avec le plugin&quot; /&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Mais ce n’est pas suffisant car il manque notamment les tâches permettant l’upload de l’apk. Pour cela il faut rajouter la &lt;code class=&quot;highlighter-rouge&quot;&gt;signingConfigs&lt;/code&gt; dans le &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;.
Ce qui peut notamment se faire comme ça :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    signingConfigs {
        release {
            storeFile file(&quot;../keystore.jks&quot;)
            storePassword &quot;7r00p3r5&quot;
            keyAlias &quot;release&quot;
            keyPassword &quot;7r00p3r5&quot;
        }
    }
    buildTypes {
        release {
            //...
            signingConfig signingConfigs.release
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Maintenant, on peut voir la présence de la tâche qui nous intéresse : &lt;code class=&quot;highlighter-rouge&quot;&gt;publishApkRelease&lt;/code&gt;&lt;/p&gt;

&lt;div style=&quot;text-align:center;margin:50px&quot;&gt;
  &lt;a href=&quot;/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_Gradlew_tasks_config_complete.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Liste des tasks gradle disponibles avec upload apk&quot; class=&quot;inlineBoxes&quot;&gt;
    &lt;img class=&quot;medium&quot; src=&quot;/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_Gradlew_tasks_config_complete.png&quot; alt=&quot;Liste des tasks gradle disponibles avec upload apk&quot; /&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&quot;tape-4--gnration-et-upload&quot;&gt;Étape 4 : génération et upload&lt;/h2&gt;

&lt;p&gt;Pour effectuer un upload de l’apk il suffit maintenant d’appeler la tâche &lt;code class=&quot;highlighter-rouge&quot;&gt;publishApkRelease&lt;/code&gt;. Et pas besoin de générer l’apk signé via Android Studio puisque comme tout est configuré, il sera généré dans les tâches précédent l’uploadApk.&lt;/p&gt;

&lt;p&gt;Si tout se passe bien le build se termine avec un :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BUILD SUCCESSFUL
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Si il y a un problème lors de l’updload, il est affiché dans la console, par exemple si le &lt;strong&gt;version code&lt;/strong&gt; est déjà utilisé&lt;/p&gt;

&lt;div style=&quot;text-align:center;margin:50px&quot;&gt;
  &lt;a href=&quot;/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_Gradlew_upload_ko.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Exemple d&#39;upload d&#39;apk en erreur&quot; class=&quot;inlineBoxes&quot;&gt;
    &lt;img class=&quot;medium&quot; src=&quot;/images/postAndroidGradlePublishApk/Android_Gradle_PublishAPK_Gradlew_upload_ko.png&quot; alt=&quot;Exemple d&#39;upload d&#39;apk en erreur&quot; /&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Ensuite vous pouvez vous rendre sur l’interface d’admin du Play Store et constater que l’upload d’un nouvel apk a bien eu lieu en alpha et le passer en bêta ou en production.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Attention&lt;/strong&gt; : ne pas commiter la clé &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt; sur github, au même titre que le mot de passe du &lt;code class=&quot;highlighter-rouge&quot;&gt;keystore&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;pour-aller-plus-loin&quot;&gt;Pour aller plus loin&lt;/h2&gt;

&lt;p&gt;Le plugin permet bien plus de choses que la livraison des apks. En effet, il permet de mettre à jour la description, les images et le changelog.
Pour savoir comment configurer tout cela, je vous invite à consulter la page github du projet &lt;a href=&quot;https://github.com/Triple-T/gradle-play-publisher&quot;&gt;https://github.com/Triple-T/gradle-play-publisher&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;L’étape ultime de la livraison continue, c’est de configurer un jenkins pour qu’il livre en alpha à chaque nouveau commit sur master, et pour cela il suffit de le configurer en rajoutant par exemple une tâche post build qui fera appel à la commande gradle que nous venons de configurer.&lt;/p&gt;

</description>
                                <pubDate>Wed, 04 Nov 2015 00:00:00 +0000</pubDate>
                                <link>http://code-troopers.com/2015/11/04/Android_publier_apk_avec_gradle.html</link>
                                <guid isPermaLink="true">http://code-troopers.com/2015/11/04/Android_publier_apk_avec_gradle.html</guid>
                        </item>
                
                        <item>
                                <title>Monitorer ses conteneurs Docker avec New Relic</title>
                                <description>&lt;p&gt;Si vous ne conaissez pas New Relic, vous loupez quelque chose, c’est le service indispensable pour monitorer vos serveurs et vos applications. Il est capable d’une part de vous remonter les données physiques de vos serveurs (mémoire, cpu, espace disque), et d’autre part d’analyser les performances de vos applications (de nombreux langages sont disponibles). Il dispose aussi d’un système d’alerting, facilement configurable. Tous ces services sont disponibles en version gratuite, avec limitation (nombre de jour limité de rétention des données par exemple). Je vous laisse consulter le &lt;a href=&quot;http://www.newrelic.com&quot;&gt;site officiel&lt;/a&gt; pour plus de détail.&lt;/p&gt;

&lt;p&gt;Nous allons seulement parler du service de monitoring des serveurs dans cet article.&lt;/p&gt;

&lt;div style=&quot;float:right;margin:20px&quot;&gt;
    &lt;a href=&quot;/images/postNewrelicDocker/new-relic.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;New Relic Logo&quot; class=&quot;inlineBoxes&quot;&gt;
        &lt;img class=&quot;medium&quot; src=&quot;/images/postNewrelicDocker/new-relic.png&quot; alt=&quot;New Relic Logo&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;

&lt;!--break--&gt;

&lt;h2 id=&quot;et-docker-dans-tout-a&quot;&gt;Et Docker dans tout ça&lt;/h2&gt;

&lt;p&gt;Ce qui est encore plus fort avec le service de monitoring des serveurs de New Relic, c’est qu’il est capable de comprendre Docker et donc de vous remonter les données par conteneur.&lt;/p&gt;

&lt;div style=&quot;text-align:center;margin:50px&quot;&gt;
    &lt;a href=&quot;/images/postNewrelicDocker/screen-newrelic-1.png&quot; data-lightbox=&quot;group-3&quot; title=&quot;Screen 1 New Relic&quot; class=&quot;inlineBoxes&quot;&gt;
        &lt;img class=&quot;medium&quot; src=&quot;/images/postNewrelicDocker/screen-newrelic-1.png&quot; alt=&quot;Screen 1 New Relic&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/images/postNewrelicDocker/screen-newrelic-2.png&quot; data-lightbox=&quot;group-3&quot; title=&quot;Screen 2 New Relic&quot; class=&quot;inlineBoxes&quot;&gt;
        &lt;img class=&quot;medium&quot; src=&quot;/images/postNewrelicDocker/screen-newrelic-2.png&quot; alt=&quot;Screen 2 New Relic&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;comment-linstaller&quot;&gt;Comment l’installer&lt;/h2&gt;

&lt;p&gt;Avec Docker bien sûr, il faut au préalable s’être créé un compte sur le site New Relic pour obtenir l’accès à l’interface et pouvoir se créer une clé (à remplacer dans la ligne de commande suivante).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d \
	--privileged=true --name newrelic
	--pid=host \
	--net=host \
	-v /sys:/sys \
	-v /dev:/dev \
	--restart=always \
	-v /var/run/docker.sock:/var/run/docker.sock \
	-v /var/log:/var/log:rw \
	-e NRSYSMOND_license_key=&amp;lt;KEY&amp;gt; \
	-e NRSYSMOND_logfile=/var/log/nrsysmond.log \
	newrelic/nrsysmond:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Vous trouverez toutes les informations &lt;a href=&quot;https://hub.docker.com/r/newrelic/nrsysmond/&quot;&gt;ici&lt;/a&gt;.&lt;/p&gt;
</description>
                                <pubDate>Wed, 30 Sep 2015 00:00:00 +0000</pubDate>
                                <link>http://code-troopers.com/2015/09/30/NewRelicDocker.html</link>
                                <guid isPermaLink="true">http://code-troopers.com/2015/09/30/NewRelicDocker.html</guid>
                        </item>
                
                        <item>
                                <title>Android M - Nouvelle gestion de permission</title>
                                <description>&lt;h1 id=&quot;nouvelle-approche&quot;&gt;Nouvelle approche&lt;/h1&gt;

&lt;p&gt;Avec la prochaine release d’&lt;code class=&quot;highlighter-rouge&quot;&gt;Android 6.0 Marshmallow&lt;/code&gt;, il va y avoir du changement au niveau de la gestion des permissions.
Terminé la popup qui demande les 10 autorisations au moment du téléchargement de l’appli, maintenant les développeurs vont pouvoir demander les permissions au moment où elles seront nécessaires.&lt;/p&gt;

&lt;h3 id=&quot;permissions-irrvocables&quot;&gt;Permissions irrévocables&lt;/h3&gt;
&lt;p&gt;Puisqu’il va falloir demander à l’utilisateur pour chaque permission, Google a décidé que certaines anciennes permissions n’auront plus besoin d’être demandées,
 ce sont les &lt;code class=&quot;highlighter-rouge&quot;&gt;Normal Permissions&lt;/code&gt;. Il s’agit des permissions qui n’engendrent pas de risque sur la vie privée ou sur la sécurité de l’utilisateur comme c’est par exemple le cas pour l’accès à internet ou l’accès au vibreur :
 la liste complète est disponible &lt;a href=&quot;https://developer.android.com/preview/features/runtime-permissions.html#normal&quot;&gt;ici&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;guidelines&quot;&gt;Guidelines&lt;/h3&gt;
&lt;p&gt;Pour ce qui est de l’UX, Google a fait plusieurs recommandations dont certaines sont plus importantes que d’autres, à mon avis :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ne demander une permisission qu’au moment où l’on en a vraiment besoin, ce qui implique de ne pas avoir un popup au lancement qui va demander toutes les permissions ;&lt;/li&gt;
  &lt;li&gt;Faire le maximum pour ne pas gâcher l’experience utilisateur même s’il refuse une permission : donc prévoir un mode dégradé autant que possible ;&lt;/li&gt;
  &lt;li&gt;Utiliser les méthodes disponibles dans appcompat plutôt que celles du sdk de base.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;mise-en-pratique&quot;&gt;Mise en pratique&lt;/h1&gt;
&lt;p&gt;Avant de commencer à coder, une dernière chose à garder à l’esprit c’est que l’utilisateur peut à tout moment révoquer une permission via le détail de l’application (même une fois que l’appli est lancée et tourne en background).
 Il faudra donc adapter la gestion de ces permissions à cette éventualité.&lt;/p&gt;

&lt;div style=&quot;text-align:center;margin-bottom:50px&quot;&gt;
    &lt;a href=&quot;/images/2015-09-AndroidMPermissions/p6.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Écran App Info&quot; class=&quot;inlineBoxes&quot;&gt;
        &lt;img class=&quot;medium&quot; src=&quot;/images/2015-09-AndroidMPermissions/p6.png&quot; alt=&quot;Écran App Info&quot; /&gt;
    &lt;/a&gt;
    &lt;a href=&quot;/images/2015-09-AndroidMPermissions/p5.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Écran App Info : détail des permissions&quot; class=&quot;inlineBoxes&quot;&gt;
            &lt;img class=&quot;medium&quot; src=&quot;/images/2015-09-AndroidMPermissions/p5.png&quot; alt=&quot;Écran App Info : détail des permissions&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&quot;ne-pas-implmenter-les-nouvelles-permissions&quot;&gt;Ne pas implémenter les nouvelles permissions&lt;/h2&gt;
&lt;p&gt;Chose importante à savoir, vous n’êtes pas obligés d’implémenter cette nouvelle gestion de permission.
En effet, puisqu’elle demande du développoment supplémentaire, de nombreuses applis ne seront pas mises à jour et garderont donc l’ancien fonctionnement. 
Si c’est ce que vous souhaitez, et pour ne pas nuire au bon fonctionnement de votre appli, il vous suffit de ne pas cibler le dernier &lt;code class=&quot;highlighter-rouge&quot;&gt;sdk&lt;/code&gt; dans votre build.gradle et de rester sur le &lt;code class=&quot;highlighter-rouge&quot;&gt;22&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;implmenter-les-nouvelles-permissions&quot;&gt;Implémenter les nouvelles permissions&lt;/h2&gt;
&lt;p&gt;Pour cela, 3 étapes sont nécessaires, principalement disponibles dans le sdk 23 ainsi que dans la lib appcompat :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;requestPermissions()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onRequestPermissionsResult()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shouldShowRequestPermissionRationale()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;buildgradle&quot;&gt;Build.gradle&lt;/h3&gt;
&lt;p&gt;Permière étape, cibler la dernier version du &lt;code class=&quot;highlighter-rouge&quot;&gt;sdk&lt;/code&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;23&lt;/code&gt;.
Et en bonus, importer appcompat pour bénéficier des méthodes helpers de Google.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;compileSdkVersion 23
defaultConfig {
    targetSdkVersion 23
}
dependencies {
    compile &#39;com.android.support:appcompat-v7:23.0.1&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;androidmanifestxml&quot;&gt;AndroidManifest.xml&lt;/h3&gt;
&lt;p&gt;Ensuite, déclarer les permissions désirées dans l’application, normalement il n’y a pas de changements par rapport à votre configuration actuelle&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&amp;gt;
&amp;lt;uses-permission android:name=&quot;android.permission.READ_CONTACTS&quot; /&amp;gt;
&amp;lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot; /&amp;gt;
&amp;lt;uses-permission android:name=&quot;android.permission.SEND_SMS&quot; /&amp;gt;
&amp;lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&amp;gt;
&amp;lt;uses-permission android:name=&quot;android.permission.CALL_PHONE&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;N’oubliez pas d’y déclarer aussi les &lt;code class=&quot;highlighter-rouge&quot;&gt;Normal Permissions&lt;/code&gt; qui, bien qu’elles soient automatiquement accordées, ont toujours besoin d’être déclarées.&lt;/p&gt;

&lt;h3 id=&quot;dans-une-activit&quot;&gt;Dans une activité&lt;/h3&gt;
&lt;p&gt;Dans un premier temps il faut vérifier si une permission est déjà accordée ou non&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ContextCompat.checkSelfPermission(context, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Si la permission n’est pas accordée, il va falloir la demander, de préférence lors d’une action utilisateur, par exemple au click sur un bouton&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ActivityCompat.requestPermissions(MainActivity.this,
                                  new String[]{Manifest.permission.CAMERA},
                                  REQUEST_CODE_ONE);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div style=&quot;text-align:center;margin-bottom:50px&quot;&gt;
    &lt;a href=&quot;/images/2015-09-AndroidMPermissions/p1.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Dialog de demande d&#39;une permission&quot; class=&quot;inlineBoxes&quot;&gt;
        &lt;img class=&quot;medium&quot; src=&quot;/images/2015-09-AndroidMPermissions/p1.png&quot; alt=&quot;Dialog de demande d&#39;une permission&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Puis écouter le choix de l’utilisateur, dans l’activité ou le fragment correspondant&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override
public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {
    switch (requestCode) {
        case REQUEST_CODE_ONE: {
            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                Toast.makeText(this, &quot;Permission granted&quot;, Toast.LENGTH_LONG).show();
            } else {
                Toast.makeText(this, &quot;Permission denied&quot;, Toast.LENGTH_LONG).show();
            }
            return;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;demander-plusieurs-permissions-en-mme-temps&quot;&gt;Demander plusieurs permissions en même temps&lt;/h3&gt;
&lt;p&gt;Même si cela est déconseillé, il peut arriver d’avoir besoin de plusieurs permissions lors de la même action utilisateur.
Pour cela il suffit de passer plusieurs permissions dans le tableau passé en paramètre du requestPermission&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ActivityCompat.requestPermissions(MainActivity.this,
                                  new String[]{Manifest.permission.READ_CONTACTS, Manifest.permission.ACCESS_FINE_LOCATION},
                                  REQUEST_CODE_TWO);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div style=&quot;text-align:center;margin-bottom:50px&quot;&gt;
    &lt;a href=&quot;/images/2015-09-AndroidMPermissions/p2.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Dialog de demande de plusieurs permissions 1/2&quot; class=&quot;inlineBoxes&quot;&gt;
        &lt;img class=&quot;medium&quot; src=&quot;/images/2015-09-AndroidMPermissions/p2.png&quot; alt=&quot;Dialog de demande de plusieurs permissions 1/2&quot; /&gt;
    &lt;/a&gt;
&lt;a href=&quot;/images/2015-09-AndroidMPermissions/p3.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Dialog de demande de plusieurs permissions 2/2&quot; class=&quot;inlineBoxes&quot;&gt;
        &lt;img class=&quot;medium&quot; src=&quot;/images/2015-09-AndroidMPermissions/p3.png&quot; alt=&quot;Dialog de demande de plusieurs permissions 2/2&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h3 id=&quot;expliquer--lutilisateur-pourquoi-il-doit-autoriser-une-permission&quot;&gt;Expliquer à l’utilisateur pourquoi il doit autoriser une permission&lt;/h3&gt;
&lt;p&gt;Il arrivera sûrement que certains utilsateurs refusent des permissions et que cela détériore l’expérience utilisateur sur l’application. Pour cela, Google fourni un helper pour savoir ou non s’il faut afficher un message d’information à l’utilisateur (graphique).
Cela se fera avec la méthode shouldShowRequestPermissionRationale&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (shouldShowRequestPermissionRationale(Manifest.permission.CALL_PHONE)) {
     new AlertDialog.Builder(MainActivity.this)
                               .setMessage(&quot;Custom message to explain why you need a permission&quot;)
                               .setPositiveButton(&quot;OK&quot;, new DialogInterface.OnClickListener() {
                                   @Override
                                   public void onClick(DialogInterface dialog, int which) {
                                       ActivityCompat.requestPermissions(MainActivity.this,
                                               new String[]{Manifest.permission.CALL_PHONE},
                                               REQUEST_CODE_FIVE);
                                   }
                               })
                               .setNegativeButton(&quot;Cancel&quot;, null)
                               .create()
                               .show();
}
ActivityCompat.requestPermissions(MainActivity.this,
                                  new String[]{Manifest.permission.CALL_PHONE},
                                  REQUEST_CODE_FIVE);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div style=&quot;text-align:center;margin-bottom:50px&quot;&gt;
    &lt;a href=&quot;/images/2015-09-AndroidMPermissions/p4.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Dialog d&#39;explication sur une demande de permissions&quot; class=&quot;inlineBoxes&quot;&gt;
        &lt;img class=&quot;medium&quot; src=&quot;/images/2015-09-AndroidMPermissions/p4.png&quot; alt=&quot;Dialog d&#39;explication sur une demande de permissions&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h3 id=&quot;le-pige--viter&quot;&gt;Le piège à éviter&lt;/h3&gt;
&lt;p&gt;Penser à vérifier régulièrement l’état des permissions dans le &lt;em&gt;onResume()&lt;/em&gt; de vos Activity ou Fragment, étant donné que l’utilsateur peut à tout moment les révoquer cela permettra d’éviter de nombreux crashs.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;p&gt;Code source d’exemple : &lt;a href=&quot;https://github.com/fchauveau/android-permissions-sample&quot;&gt;https://github.com/fchauveau/android-permissions-sample&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Doc développeur Android : &lt;a href=&quot;https://developer.android.com/preview/features/runtime-permissions.html&quot;&gt;https://developer.android.com/preview/features/runtime-permissions.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Guidelines Android : &lt;a href=&quot;https://developer.android.com/preview/features/runtime-permissions.html&quot;&gt;http://www.google.fr/design/spec/patterns/permissions.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Explication sur quand demander une permission : &lt;a href=&quot;https://www.youtube.com/watch?v=iZqDdvhTZj0&quot;&gt;https://www.youtube.com/watch?v=iZqDdvhTZj0&lt;/a&gt;&lt;/p&gt;

</description>
                                <pubDate>Tue, 22 Sep 2015 00:00:00 +0000</pubDate>
                                <link>http://code-troopers.com/2015/09/22/Android_M_Permissions.html</link>
                                <guid isPermaLink="true">http://code-troopers.com/2015/09/22/Android_M_Permissions.html</guid>
                        </item>
                
                        <item>
                                <title>Owncloud : solution de cloud en 5 min avec Docker</title>
                                <description>&lt;p&gt;Que ce soit pour des raisons politique de confidentialité ou des raisons technique, &lt;a href=&quot;https://owncloud.org/&quot;&gt;Owncloud&lt;/a&gt; a énormément de qualités comparé à Dropbox ou Google drive. Déjà car la limite de taille des données est celle du serveur, ensuite car des applications sous linux permettent de synchroniser des dossiers et enfin car il existe une multitude d’addons qui permettent de sauvegarder ses mots de passe, jouer de la musique, envoyer des notifs sur Slack etc.&lt;/p&gt;

&lt;p&gt;La mise en production d’une instance Owncloud se fait en 5 minutes montre en main, à condition de connaître un minimum Docker.&lt;/p&gt;

&lt;h2 id=&quot;nginxproxy&quot;&gt;Nginx/proxy&lt;/h2&gt;

&lt;p&gt;Nous allons commencer par une petite digression. Avant quand on avait plusieurs “virtual host” qui pointaient sur une machine, on mettait un front-end apache et c’était plus ou moins la galère. Maintenant, il suffit de lancer cette commande une fois :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --restart=always --name nginx -d -p 80:80 -p 443:443 -v /docker/vhost.d:/etc/nginx/vhost.d:ro -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;!--break--&gt;
&lt;p&gt;On pourra alors rajouter la variable d’environnement &lt;code class=&quot;highlighter-rouge&quot;&gt;VIRTUAL_HOST&lt;/code&gt; à chaque nouvelle image Docker pour qu’elle soit directement accessible. Ce qui est magique aussi c’est que si on expose un seul port de l’image Docker alors il est directement mappé sur le port 80, même si le port n’était pas forwardé sur le host. Dernier avantage, si on met deux machines avec le même nom il va s’occuper de faire du load balancing tout seul !&lt;/p&gt;

&lt;p&gt;Si jamais la configuration par défaut ne convient pas, il faut rajouter un fichier de configuration dans &lt;code class=&quot;highlighter-rouge&quot;&gt;/docker/vhost.d/&lt;/code&gt;. Dans notre cas nous en avons eu besoin pour permettre d’uploader des fichiers plus gros (c’est 2 Mo par défaut).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat /docker/vhost.d/owncloud.hostname.com
client_max_body_size 100m;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;docker-compose&quot;&gt;Docker-compose&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;Docker-compose&lt;/a&gt; est un outil très pratique pour gérer les options d’une image docker. Il faut souvent lancer une image Docker avec des variables d’environnement, des liens et des volumes, et quelques semaines plus tard, on ne se souvient plus comment on a lancé les images. Là on n’a plus que une seule commande pour gérer toutes les images d’un coup et les options sont lisibles facilement.&lt;/p&gt;

&lt;p&gt;Rentrons dans le vif du sujet :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mariaOC:
  image: mariadb
  volumes:
   - /home/owncloud/db:/var/lib/mysql
  environment:
   - MYSQL_ROOT_PASSWORD=passwordRoot
   - MYSQL_USER=owncloud-production
   - MYSQL_DATABASE=owncloud-production
   - MYSQL_PASSWORD=passwordUser
   - TZ=Europe/Paris
owncloud:
  image: jchaney/owncloud
  volumes:
    - /home/owncloud/data:/var/www/owncloud/data
    - /home/owncloud/logs/nginx:/var/log/nginx
    - /home/owncloud/logs/cron:/var/log/cron
    - /etc/ssl/certs/ssl-cert-snakeoil.pem:/etc/ssl/certs/ssl-cert-snakeoil.pem:ro
    - /etc/ssl/private/ssl-cert-snakeoil.key:/etc/ssl/private/ssl-cert-snakeoil.key:ro
  environment:
    - VIRTUAL_HOST=owncloud.hostname.com
    - MYSQL_ROOT_PASSWORD=passwordRoot
    - MYSQL_USER=owncloud-production
    - MYSQL_DATABASE=owncloud-production
    - MYSQL_PASSWORD=passwordUser
    - TZ=Europe/Paris
    - OWNCLOUD_IN_ROOTPATH=1
    - OWNCLOUD_SERVER_NAME=owncloud.hostname.com
    - SSL_CERT=/etc/ssl/certs/ssl-cert-snakeoil.pem
    - SSL_KEY=/etc/ssl/private/ssl-cert-snakeoil.key
  links:
    - mariaOC:db
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Voici le fichier docker-compose.yml utilisé. On définit une image de &lt;a href=&quot;https://mariadb.org/&quot;&gt;MariaDB&lt;/a&gt; pour laquelle on spécifie un volume qui va recevoir les données et différentes variables d’environnements dont les noms sont assez explicite.
Puis une image owncloud avec des volumes pour les fichiers que l’on va sauvegarder, les logs et la clé SSL. Un lien avec la base de donnée MariaDB et quelques variables d’environnements, là encore les noms sont suffisamment explicite.&lt;/p&gt;

&lt;p&gt;Une fois les variables modifiées selon notre volonté, il faut lancer les commandes &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose build&lt;/code&gt; suivi de &lt;code class=&quot;highlighter-rouge&quot;&gt;compose-docker up -d&lt;/code&gt; et aller sur owncloud.hostname.com pour finir l’installation.&lt;/p&gt;

&lt;p&gt;L’article est déjà fini, comme je le disais, ça se fait en un rien de temps. Mais si cela a été aussi rapide, c’est parce que Owncloud a une image très bien faîtes donc merci Josh de l’avoir mise à disposition &lt;a href=&quot;https://github.com/jchaney/owncloud&quot;&gt;https://github.com/jchaney/owncloud&lt;/a&gt;&lt;/p&gt;

&lt;div style=&quot;text-align:center;margin-bottom:50px&quot;&gt;
    &lt;a href=&quot;/images/postOwncloudDocker/owncloud.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Owncloud site et appli&quot; class=&quot;inlineBoxes&quot;&gt;
        &lt;img class=&quot;medium&quot; src=&quot;/images/postOwncloudDocker/owncloud.png&quot; alt=&quot;Owncloud site et appli&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

</description>
                                <pubDate>Wed, 09 Sep 2015 00:00:00 +0000</pubDate>
                                <link>http://code-troopers.com/2015/09/09/OwncloudDocker.html</link>
                                <guid isPermaLink="true">http://code-troopers.com/2015/09/09/OwncloudDocker.html</guid>
                        </item>
                
                        <item>
                                <title>GIT-SVN comment survivre dans un environnement hostile</title>
                                <description>&lt;p&gt;Git c’est cool, Git c’est Hype, Git c’est tout récent (&lt;a href=&quot;http://git-scm.com/book/fr/v1/D%C3%A9marrage-rapide-Une-rapide-histoire-de-Git&quot;&gt;enfin presque&lt;/a&gt;) et c’est pour ça qu’on aime bien.
Mais pour beaucoup Git c’est nouveau, donc c’est le changement, donc c’est compliqué, et c’est pour ça que plein de boîtes préfèrent garder leur serveur svn.&lt;/p&gt;

&lt;p&gt;Je vais tenter ici, de vous donner les principales commandes de &lt;code class=&quot;highlighter-rouge&quot;&gt;Git-SVN&lt;/code&gt;. Ainsi si vous vous trouvez dans une boîte qui ne veut pas changer son scm mais que vous, vous avez envie de changement,
vous pourrez donc utiliser la puissance de Git. 
Et ce sans aucun impact sur le gestionnaire de sources de la société dans laquelle vous êtes. C’est génial non ?&lt;/p&gt;

&lt;!--break--&gt;

&lt;h2 id=&quot;prrequis&quot;&gt;Prérequis&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Avoir Git-SVN d’installé ! Et ce qui est bien fait, c’est que Git-SVN fait partie intégrante de Git. C’est donc Git que vous allez installer : &lt;a href=&quot;http://www.git-scm.com&quot;&gt;www.git-scm.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Un accès au svn (l’url du projet qui vous intéresse fera largement l’affaire)&lt;/li&gt;
  &lt;li&gt;Un terminal&lt;/li&gt;
  &lt;li&gt;Un tout petit peu de courage&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;init-du-projet&quot;&gt;Init du Projet&lt;/h2&gt;
&lt;p&gt;Le cas le plus courant est celui où tout le monde travaille sur le trunk du projet, et je vais partir de ce cas pour ce guide. 
Si ce n’est pas le cas, il n’y a pas de gros changement, mais je vous invite à consulter plus en détail &lt;a href=&quot;https://git-scm.com/docs/git-svn&quot;&gt;la doc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Donc si on se met dans la situation où tout le monde travaille sur le trunk, pour récupérer les sources du projet dans un nouveau répertoire vous devrez faire un :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git svn clone http://maboite/svn/monBeauProjet/ -s
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Par contre dès que le repo svn et un peu vieux (i.e. avec plein de commits) ça va mettre 3h ! En effet, Git va prendre les révisions une par une afin de créer son historique local.
Si vous n’avez pas besoin de tout l’historique des révisions ce que vous pouvez faire c’est :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git svn clone http://maboite/svn/monBeauProjet/ -s -r4000:HEAD
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;ainsi il ne crééra l’histo qu’à partir de la révision 4000 du svn. Je vous conseille donc de prendre le 4000 le plus proche de la dernière révision.&lt;/p&gt;

&lt;p&gt;À partir de là c’est bon, vous avez votre projet qui est géré par Git. La preuve vous pouvez tester via ces différentes commandes&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git status
git branch -a
git log -n5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;travailler-sur-le-projet-en-local&quot;&gt;Travailler sur le projet (en local)&lt;/h2&gt;
&lt;p&gt;Vous pouvez donc dès à présent commencer à travailler offline ou bien sans vous soucier des commits de vos collègues.
Et cela avec tous les avantages que Git apporte.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit -m&quot;Ajout de la modification du mot de passe par l&#39;admin&quot;
git stash save “Début de ma tâche prioritaire”
... // un peu de travail urgent
git stash pop
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;On peut même faire des branches Git (en local) sans que cela n’impacte le serveur.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout -b myLocalBranch
... // du travail avec plein de petits commits
git checkout master
git merge myLocalBranch
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;commiter-sur-le-svn&quot;&gt;Commiter sur le svn&lt;/h2&gt;
&lt;p&gt;Ensuite pour se synchroniser avec vos collègues (c’est mieux) les deux commandes indispensables sont&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git svn rebase
git svn dcommit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Le &lt;code class=&quot;highlighter-rouge&quot;&gt;git svn rebase&lt;/code&gt; va faire l’équivalent d’un svn update quant au &lt;code class=&quot;highlighter-rouge&quot;&gt;git svn dcommit&lt;/code&gt; ça sera un svn commit.&lt;/p&gt;

&lt;h2 id=&quot;bonus--utiliser-des-branches&quot;&gt;Bonus : Utiliser des branches&lt;/h2&gt;
&lt;p&gt;Bon soyons honnêtes si vous utilisez un svn il y a quand même peu de chances que les branches soient vraiment utilisées (ou alors peut-être que vous aimez la douleur). Mais si ça arrive, voilà comment les utiliser.&lt;/p&gt;

&lt;p&gt;Mettre à jour toutes les branches du svn :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git svn fetch
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Changer de branche :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout -b &amp;lt;brancheDistante&amp;gt; &amp;lt;nomDeBrancheLocale&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Et maintenant vous pouvez naviguer entre vos branches normalement via Git  :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout master
git checkout nomDeBrancheLocale
git checkout -
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;et par exemple pour recopier un commit d’une branche à une autre sans copier manuellement le fichier.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git cherry-pick
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Voilà vous avez maintenant les bases pour utiliser Git alors que de premier abord cela ne semblait pas possible.
Il ne vous reste plus qu’à forcer un peu plus pour remplacer l’ancien serveur svn par un nouveau sous Git et comme ça toute votre boîte pourra en profiter.
&lt;br /&gt;
&lt;br /&gt;
Pour connaître les principales commandes Git, je vous invite à consulter &lt;a href=&quot;http://git-scm.com/docs/gittutorial&quot;&gt;la page tutoriel de Git&lt;/a&gt; ou alors de chercher sur &lt;a href=&quot;http://lmgtfy.com/?q=git+commands&quot;&gt;internet&lt;/a&gt;.&lt;/p&gt;
</description>
                                <pubDate>Thu, 16 Jul 2015 00:00:00 +0000</pubDate>
                                <link>http://code-troopers.com/2015/07/16/GITSVN.html</link>
                                <guid isPermaLink="true">http://code-troopers.com/2015/07/16/GITSVN.html</guid>
                        </item>
                
                        <item>
                                <title>Installer votre dépot privé Docker</title>
                                <description>&lt;p&gt;Petit à petit chez Code-Troopers, nous migrons tous nos développements pour utiliser Docker. 
Cela fait quelque temps que nous l’utilisons pour des projets “public”, auquel cas le registry public Docker est largement suffisant (et immédiat à utiliser).&lt;/p&gt;

&lt;p&gt;En revanche, nous commençons à migrer nos applications de production également vers Docker, et nous ne pouvons pas utiliser le mode public du registry public.
Nous nous sommes donc mis à déployer un dépôt privé, authentifié par utilisateur / mot de passe.&lt;/p&gt;

&lt;p&gt;La procédure n’est pas très complexe, mais cette opération reste une bonne opportunité d’écrire un article à ce sujet (les articles en français n’étant pas légion).
&lt;!--break--&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-by-step&quot;&gt;Step by step&lt;/h2&gt;
&lt;p&gt;Il faut créer une entrée DNS pour votre service.&lt;/p&gt;

&lt;p&gt;Puis nous allons utiliser l’image Docker avec nginx pour l’authentification &lt;a href=&quot;https://github.com/MarvAmBass/docker-nginx-registry-proxy&quot;&gt;docker-nginx-registry-proxy&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;informations-didentification&quot;&gt;Informations d’identification&lt;/h2&gt;
&lt;p&gt;Pour les étapes suivantes, placez vous dans le répertoire de votre choix pour stocker les fichiers (dans ce cas nous sommes dans &lt;code class=&quot;highlighter-rouge&quot;&gt;/srv/registry-config&lt;/code&gt;)&lt;/p&gt;

&lt;h3 id=&quot;gnration-du-certificat&quot;&gt;Génération du certificat&lt;/h3&gt;
&lt;p&gt;Pensez à bien renseigner le FQDN DNS lors de la demande de Common Name pour le certificat.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl genrsa -out ca.key 4096
openssl req -new -x509 -days 1826 -key ca.key -out ca.crt
openssl genrsa -out ia.key 4096
openssl req -new -key key.pem -out ia.csr #this is where you need to fill your FQDN
openssl x509 -req -days 730 -in ia.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out cert.pem
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;gnration-des-mots-de-passes-basic-auth&quot;&gt;Génération des mots de passes basic auth&lt;/h3&gt;
&lt;p&gt;En utilisant un container docker qui embarque htpasswd vous pourrez générer facilement le fichier nécessaire :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --rm -ti -v $(pwd):/tmp dgageot/htpasswd -c /tmp/docker-registry.htpasswd $MONUSER
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;dmarrage-du-registry&quot;&gt;Démarrage du registry&lt;/h2&gt;
&lt;p&gt;Les images seront stockées dans le répertoire &lt;code class=&quot;highlighter-rouge&quot;&gt;/srv/registry&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir /srv/registry
docker run -d --restart=always --name registry -v /srv/docker-registry:/registry -e &quot;SETTINGS_FLAVOR=local&quot; -e &quot;STORAGE_PATH=/registry&quot; registry
docker run -d --restart=always -p 443:443 -v /srv/registry-config:/etc/nginx/external --link registry:registry --name nginx-registry-proxy marvambass/nginx-registry-proxy
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;configuration-dune-machine-cliente&quot;&gt;Configuration d’une machine cliente&lt;/h2&gt;

&lt;h3 id=&quot;importer-le-certificat-racine&quot;&gt;Importer le certificat racine&lt;/h3&gt;
&lt;p&gt;Il faut importer le certificat racine dans la liste des certificats reconnus&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo -s
mkdir -p /etc/docker/certs.d/$FQDN
cp ca.crt /etc/docker/certs.d/$FQDN/

mkdir -p /usr/local/share/ca-certificates/docker-ct
cp ca.crt /usr/local/share/ca-certificates/docker-ct/
update-ca-certificates-
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pour vérifier que tout fonctionne comme attendu, vous pouvez voir si votre certificat ressort bien dans la commande suivante :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;awk -v cmd=&#39;openssl x509 -noout -subject&#39; &#39; /BEGIN/{close(cmd)};{print | cmd}&#39; &amp;lt; /etc/ssl/certs/ca-certificates.crt | grep $(VOTRE IDENTIFIANT)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Vous serez également certainement amené à redémarrer vos daemon docker (de chacune des machines)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl stop docker
systemctl start docker
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;identification-sur-le-dpot&quot;&gt;Identification sur le dépot&lt;/h3&gt;
&lt;p&gt;Une fois que toutes ces étapes sont effectuées, normalement votre dépot est prêt à être utilisé.&lt;/p&gt;

&lt;p&gt;Il vous faut cependant en première étape vous identifier à l’aide du couple utilisateur / mot de passe créé lors de l’installation :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker login https://mondepotdocker.tld
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ceci aura pour effet de créer un fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.dockercfg&lt;/code&gt; vous permettant d’accéder aux commandes suivantes sans avoir besoin de retaper vos identifiants.&lt;/p&gt;

&lt;h2 id=&quot;utilisation-du-dpt&quot;&gt;Utilisation du dépôt&lt;/h2&gt;

&lt;p&gt;Une fois la machine cliente configurée, vous pouvez simplement utiliser le dépot en préfixant les noms de vos images par l’URL du dépôt.
Par exemple, pour push/pull l’image de monapplication la commande suivante fera l’affaire :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker push mondepotdocker.tld/monapplication:v1.0.0
docker pull mondepotdocker.tld/monapplication:v1.0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;utilisation-avec-docker-compose&quot;&gt;Utilisation avec docker-compose&lt;/h3&gt;

&lt;p&gt;Si vous utilisez docker-compose, il se peut que vous ayiez des soucis avec le certificat autosigné et/ou avec l’authentification.&lt;/p&gt;

&lt;p&gt;Pour contourner la vérification du certificat, vous pouvez simplement lancer &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose&lt;/code&gt; avec le flag &lt;code class=&quot;highlighter-rouge&quot;&gt;--allow-insecure-ssl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pour ce qui est de l’authentification, une astuce simple pour contourner les problèmes de ce genre est de faire un &lt;code class=&quot;highlighter-rouge&quot;&gt;docker pull&lt;/code&gt; manuellement au préalable (le scripter depuis le fichier compose.yml n’est pas trop difficile).&lt;/p&gt;
</description>
                                <pubDate>Thu, 25 Jun 2015 00:00:00 +0000</pubDate>
                                <link>http://code-troopers.com/2015/06/25/InstallDockerRegistry.html</link>
                                <guid isPermaLink="true">http://code-troopers.com/2015/06/25/InstallDockerRegistry.html</guid>
                        </item>
                
                        <item>
                                <title>Améliorer la complétion JavaScript d&#39;IntelliJ IDEA</title>
                                <description>&lt;h1 id=&quot;intellij-idea&quot;&gt;IntelliJ IDEA&lt;/h1&gt;
&lt;p&gt;Tout le monde sait que nous adorons utiliser IntelliJ IDEA pour développer. 
Peu importe le langage IntelliJ est vraiment un excellent IDE qui nous permet d’être efficaces quasiment instantanément.&lt;/p&gt;

&lt;p&gt;Par contre, quand on arrive dans le monde du JavaScript on peut avoir quelques soucis pour être 
dans un environnement suffisamment typé où l’on sait ce qu’on va faire sans se poser trop de questions, 
ou tout simplement pouvoir bénéficier de l’aide de l’IDE pour savoir de quelles méthodes on dispose.&lt;/p&gt;

&lt;!--break--&gt;

&lt;h2 id=&quot;javascript-dans-intellij&quot;&gt;JavaScript dans IntelliJ&lt;/h2&gt;
&lt;p&gt;Par défaut, IntelliJ est déjà suffisament malin pour scanner les fichiers du workspace 
et trouver de la complétion en automatique (ainsi que la JSDoc).&lt;/p&gt;

&lt;p&gt;Cependant, ce mécanisme ne marche pas à tous les coups :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;vous utilisez des versions sur des CDN&lt;/li&gt;
  &lt;li&gt;vous avez des versions minifiées dans votre workspace&lt;/li&gt;
  &lt;li&gt;vous utilisez des outils qui impliquent certains framework (karma / jasmine / mocha…)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;faire-comprendre-le-javascript--intellij&quot;&gt;Faire comprendre le JavaScript à IntelliJ&lt;/h2&gt;
&lt;p&gt;Pour réussir à obtenir une complétion correcte vous avez plusieurs solutions :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pour les CDN, vous pouvez demander à IntelliJ de récupérer la ressource (il ne la mettra pas dans votre projet pour autant)&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align:center;margin-bottom:50px&quot;&gt;
    &lt;a href=&quot;/images/2015-06-JavaScriptIntelliJ/cdndl.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Le téléchargement des fichiers sur un CDN [alt+entrée]&quot; class=&quot;inlineBoxes&quot;&gt;
        &lt;img class=&quot;medium&quot; src=&quot;/images/2015-06-JavaScriptIntelliJ/cdndl.png&quot; alt=&quot;Le téléchargement des fichiers sur un CDN [alt+entrée]&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;pour les versions minifiées, vous pouvez ajouter manuellement les bibliothèques dans la fenêtre de paramètres (Languages &amp;amp; Frameworks &amp;gt; JavaScript &amp;gt; Libraries)&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align:center;margin-bottom:50px&quot;&gt;
    &lt;a href=&quot;/images/2015-06-JavaScriptIntelliJ/settings.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;La fenêtre des paramètres&quot; class=&quot;inlineBoxes&quot;&gt;
        &lt;img class=&quot;medium&quot; src=&quot;/images/2015-06-JavaScriptIntelliJ/settings.png&quot; alt=&quot;La fenêtre des paramètres&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&quot;la-mega-astuce&quot;&gt;LA mega astuce&lt;/h2&gt;
&lt;p&gt;IntelliJ est capable de comprendre le TypeScript, et des gens ont eu la bonne idée de regrouper des définitions TypeScript pour
la plupart des librairies les plus utilisées dans un dépôt Github : &lt;a href=&quot;http://www.definitelytyped.org&quot;&gt;DefinitelyTyped&lt;/a&gt;.
Dans la fenêtre de création de librairie JavaScript, dans la partie qui permet le téléchargement d’une librairie, 
sélectionnez la source “TypeScript Community Stubs”, vous verrez qu’il y a beaucoup de librairies que vous utilisez au quotidien.&lt;/p&gt;

&lt;p&gt;Avec ceci, vous aurez une complétion efficace, avec le typage offert par TypeScript (dans la mesure du possible), 
ainsi qu’une documentation précise (pour la plupart des librairies).&lt;/p&gt;

&lt;div style=&quot;text-align:center;margin-bottom:50px&quot;&gt;
    &lt;a href=&quot;/images/2015-06-JavaScriptIntelliJ/example.png&quot; data-lightbox=&quot;group-1&quot; title=&quot;Jasmine est bien connu par IntelliJ&quot; class=&quot;inlineBoxes&quot;&gt;
        &lt;img class=&quot;medium&quot; src=&quot;/images/2015-06-JavaScriptIntelliJ/example.png&quot; alt=&quot;Jasmine est bien connu par IntelliJ&quot; /&gt;
    &lt;/a&gt;
&lt;/div&gt;
</description>
                                <pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate>
                                <link>http://code-troopers.com/2015/06/10/CompletionJavascriptDansIntelliJ.html</link>
                                <guid isPermaLink="true">http://code-troopers.com/2015/06/10/CompletionJavascriptDansIntelliJ.html</guid>
                        </item>
                
                        <item>
                                <title>Android Support Design Library</title>
                                <description>&lt;p&gt;Avez-vous déjà essayé de transformer vos applications Android pour les rendre conformes aux &lt;a href=&quot;http://www.google.com/design/spec/material-design/introduction.html&quot;&gt;guidelines Material&lt;/a&gt;, si oui, vous avez dû comme nous, vous retrouver à importer plein de librairies tierces pour implémenter par exemple le &lt;code class=&quot;highlighter-rouge&quot;&gt;FAB button&lt;/code&gt;, ou même personnaliser le code pour rendre le &lt;code class=&quot;highlighter-rouge&quot;&gt;NavigationDrawer&lt;/code&gt; conforme (comme ce qui a pu être fait sur le squelette d’un &lt;a href=&quot;http://code-troopers.com/2014/11/26/SqueletteAndroid5.html&quot;&gt;précédent article&lt;/a&gt;. Et bien tout ceci est fini (enfin en partie), grâce à la nouvelle librairie Android de Google &lt;a href=&quot;http://developer.android.com/tools/support-library/features.html#design&quot;&gt;Design Support&lt;/a&gt;.&lt;/p&gt;

&lt;!--break--&gt;

&lt;div style=&quot;text-align:center&quot;&gt;
&lt;video width=&quot;270&quot; height=&quot;444&quot; controls=&quot;&quot;&gt;
  &lt;source src=&quot;/videos/designlibrary-cheesesquare.mp4&quot; type=&quot;video/mp4&quot; /&gt;
Your browser does not support the video tag.
&lt;/video&gt;
&lt;/div&gt;

&lt;p&gt;Pour le moment elle permet d’implémenter les composants Material suivants :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TextInputLayout&lt;/li&gt;
  &lt;li&gt;FloatingActionButton&lt;/li&gt;
  &lt;li&gt;Snackbar&lt;/li&gt;
  &lt;li&gt;TabLayout&lt;/li&gt;
  &lt;li&gt;NavigationView&lt;/li&gt;
  &lt;li&gt;CoordinatorLayout&lt;/li&gt;
  &lt;li&gt;AppBarLayout&lt;/li&gt;
  &lt;li&gt;CollapsingToolbarLayout&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Je vous laisse consulter les différents articles trouvés sur le sujet pour avoir plus de détails :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://android-developers.blogspot.fr/2015/05/android-design-support-library.html&quot;&gt;L’article sur l’Android developers blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/android-bites/first-steps-with-the-design-support-library-8dcf06230ddd&quot;&gt;L’article sur medium.com&lt;/a&gt; : qui montre les nouveautés grâce à des petites vidéos mais montre aussi les problèmes (sûrement corrigés au moment où vous lirez cet article)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://antonioleiva.com/navigation-view/&quot;&gt;Un bout d’exemple avec du code pour le NavigationView&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enfin, voici le &lt;a href=&quot;https://github.com/chrisbanes/cheesesquare&quot;&gt;lien&lt;/a&gt; vers le code source de l’application exemple faite par &lt;a href=&quot;https://chris.banes.me/&quot;&gt;Chris Banes&lt;/a&gt;, montrant les principales nouveautés de cette librairie.&lt;/p&gt;

&lt;p&gt;À vos applications !&lt;/p&gt;

</description>
                                <pubDate>Sat, 06 Jun 2015 00:00:00 +0000</pubDate>
                                <link>http://code-troopers.com/2015/06/06/AndroidDesignLibrary.html</link>
                                <guid isPermaLink="true">http://code-troopers.com/2015/06/06/AndroidDesignLibrary.html</guid>
                        </item>
                
        </channel>
</rss>